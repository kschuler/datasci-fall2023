{
  "hash": "dff01c5856eab7a6d2c18e69ee488971",
  "result": {
    "markdown": "---\ntitle: \"Model Fitting\"\nsubtitle: \"Data Science for Studying Language and the Mind\"\nauthor: Katie Schuler\ndate: 10-17-2023\necho: true\nformat: \n    revealjs:\n        theme: dark\n        slide-number: true\n        incremental: true \n        footer: \"[https://kathrynschuler.com/datasci](https://kathrynschuler.com/datasci/)\"\n---\n\n::: {.cell}\n\n:::\n\n\n## You are `here` {.smaller} \n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\n##### Data science with R \n::: {.nonincremental}\n- Hello, world!\n- R basics\n- Data importing\n- Data visualization\n- Data wrangling \n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### Stats & Model buidling\n::: {.nonincremental}\n- Sampling distribution\n- Hypothesis testing\n- Model specification\n- `Model fitting` \n- Model accuracy\n- Model reliability\n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### More advanced \n::: {.nonincremental}\n\n- Classification\n- Feature engineering (preprocessing) \n- Inference for regression\n- Mixed-effect models\n::: \n:::\n\n::::\n\n## Model building overview {.smaller}\n\n- **Model specification**: what is the form?\n- **Model fitting**: you have the form, how do you guess the free parameters? \n- **Model accuracy**: you've estimated the parameters, how well does that model describe your data? \n- **Model reliability**: when you estimate the parameters, there is some uncertainty on them\n\n# Model specification \n\na brief review\n\n## \n\n:::: {.columns}\n\n::: {.column width=\"67%\"}\n#### Types of models {.smaller}\n![](/include/figures/types-of-models.png)\n\n:::\n\n::: {.column width=\"33%\"}\n\n#### Specification {.smaller}\n\n1. Response, $y$\n2. Explanatory, $x_n$\n3. Functional form, $y=\\beta_0 + \\beta_1x_1 + \\epsilon$\n4. Model terms\n    - Intercept\n    - Main\n    - Interaction\n    - Transformation\n\n:::\n\n::::\n\n\n## Linear model functional form\n\n| field | linear model eq |\n| --- | --------- |\n| `h.s. algebra` | $y=ax+b$ |\n| `machine learning` | $y = w_0 + w_1x_1 + w_2x_2 + ... + w_nx_n$ |\n| `statistics` | $y = β_0 + β_1x_1 + β_2x_2 + ... + β_nx_n + ε$ |\n| `matrix` | $y = Xβ + ε$ |\n\n# Model fitting\n\n## Model fitting\n\n\n```{mermaid}\n%%| echo: false\nflowchart TD\n    spec(Model specification) --> fit(Estimate free parameters) \n    fit(Estimate free parameters) --> fitted(Fitted model) \n```\n\n\n## Fitting a linear model {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\n\n\n```{mermaid}\n%%| echo: false\nflowchart TD\n    spec(Model specification \\n y = ax + b) --> fit(Estimate free parameters) \n    fit(Estimate free parameters) --> fitted(Fitted model \\n y = 0.7x + 0.6) \n```\n\n\n\n:::\n\n::: {.column width=\"67%\"}\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x = x, y = y)) +\n    geom_point(size = 4, color = \"darkred\") +\n    geom_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) \n```\n\n::: {.cell-output-display}\n![](model-fitting_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n:::\n\n\n\n::::\n\n## Fitting by intuition {.smaller}\n\nHow would you draw a \"best fit\" line?  \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](model-fitting_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n## Fitting by intuition {.smaller}\n\nWhich line fits best?  How can you tell? \n\n\n::: {.cell layout-nrow=\"3\" layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](model-fitting_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](model-fitting_files/figure-revealjs/unnamed-chunk-7-2.png){width=960}\n:::\n:::\n\n\n\n## Quantifying \"goodness\" of fit  {.smaller}\n\nWe can measure how close the model is to the data\n\n\n::: {.cell}\n\n:::\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](model-fitting_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](model-fitting_files/figure-revealjs/unnamed-chunk-9-2.png){width=960}\n:::\n:::\n\n\n. . . \n\n`residuals`\n\n## $SSE=\\sum_{i=i}^{n} (d_{i} - m_{i})^2$ {.smaller} \n\n\n::: {.cell layout-nrow=\"2\" layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](model-fitting_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](model-fitting_files/figure-revealjs/unnamed-chunk-10-2.png){width=960}\n:::\n\n::: {.cell-output-display}\n|  x|   y| pred|  err| sq_err|\n|--:|---:|----:|----:|------:|\n|  1| 1.2|  1.3| -0.1|   0.01|\n|  2| 2.5|  2.0|  0.5|   0.25|\n|  3| 2.3|  2.7| -0.4|   0.16|\n|  4| 3.1|  3.4| -0.3|   0.09|\n|  5| 4.4|  4.1|  0.3|   0.09|\n:::\n\n::: {.cell-output-display}\n|  x|   y| pred|   err| sq_err|\n|--:|---:|----:|-----:|------:|\n|  1| 1.2| 1.58| -0.38| 0.1444|\n|  2| 2.5| 2.62| -0.12| 0.0144|\n|  3| 2.3| 3.66| -1.36| 1.8496|\n|  4| 3.1| 4.70| -1.60| 2.5600|\n|  5| 4.4| 5.74| -1.34| 1.7956|\n:::\n:::\n\n\n## But there are infinite possibilities\n\nWe can't test all `Inf` of the possible free parameters\n\n$y=b_0+b_1x_1$\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n#### Free parameters to test\n\n![](../include/figures/error-surf-1.png)\n\n:::\n\n::: {.column width=\"50%\"}\n\n#### Level = SSE\n\n![](../include/figures/error-surf-2.png)\n\n:::\n\n::::\n\n\n## Error surface \n\n![](../include/figures/error-surface.png)\n\n## Gradient descent, intuition\n\n![](../include/figures/grad-desc-intuition.jpeg)\n\n## Gradient descent \n\n![](../include/figures/gradient-descent.png)\n\n## Gradient descent linear model \n\n![](../include/figures/error-surface-linear.png)\n\nLinear models are convex functions: one minimum\n\n## Ordinary least squares\n\nLinear models have a solution: we can solve for the values with linear algebra. \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n#### $y = ax + b$\n\n$1.2 = a1 + b$\n\n$2.5 = a2 + b$\n\n::: \n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm(y ~ 1 + x, data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = y ~ 1 + x, data = data)\n\nCoefficients:\n(Intercept)            x  \n        0.6          0.7  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n    specify(y ~ 1 + x) %>%\n    fit()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  term      estimate\n  <chr>        <dbl>\n1 intercept    0.600\n2 x            0.7  \n```\n:::\n:::\n\n\n:::\n\n::::\n\n`ordinary least squares`",
    "supporting": [
      "model-fitting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}