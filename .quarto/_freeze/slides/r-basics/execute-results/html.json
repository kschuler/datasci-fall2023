{
  "hash": "299534a3a0107d88dbbe2ff73c23283e",
  "result": {
    "markdown": "---\ntitle: \"R basics\"\nauthor: Katie Schuler\nsubtitle: \"Data Science for Studying Language and the Mind\"\ndate: 2023-08-31\necho: true\nformat: \n    revealjs:\n        theme: dark\n        incremental: true\n        footer: \"[https://kathrynschuler.com/datasci](/index.html)\"\n\n---\n\n\n## You are `here` {.smaller} \n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\n##### Data science with R \n::: {.nonincremental}\n- Hello, world!\n- `R basics`\n- Data importing\n- Data visualization \n- Data wrangling \n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### Stats & Model buidling\n::: {.nonincremental}\n- Probability distributions\n- Sampling variability\n- Hypothesis testing\n- Model specification\n- Model fitting \n- Model accuracy\n- Model reliability\n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### More advanced \n::: {.nonincremental}\n\n- Classification\n- Feature engineering (preprocessing) \n- Inference for regression\n- Mixed-effect models\n::: \n:::\n\n::::\n\n## Learning resources\n\n- [colab notebook (R kernel)](https://colab.research.google.com/#create=true&language=r)\n- [Lecture notes](/notes/r-basics.html) \n- [Labs](/labs/lab-01.html)\n\n## Basic concepts (review) {.smaller}\n\n- `Expressions`: fundamental building blocks of programming \n- `Objects`: allow us to store stuff, created with assignment operator\n- `Name`s: names w give objects must be letters, numbers, ., or _\n- `Attributes`: allow us to attach arbitrary metadata to objects\n- `Functions`: take some input, perform some computation, and return some output\n- `Environment`: collection of all objects we defined in current R session\n- `Packages`: collections of functions, data, and documentation bundled together in R\n- `Comments`: notes you leave for yourself, not evaluated\n- `Messages`: notes R leaves for you (FYI, warning, error)\n\n\n## Important functions \n#### Objects\n- `str(x)` - returns summary of object's structure\n- `typeof(x)` - returns object's data type\n- `length(x)` - returns object's length\n- `attributes(x)` - returns list of object's attributes\n\n## Important functions  \n#### Environment\n\n- `ls()` - list all variables in environment\n- `rm(x)` - remove x variable from environment\n- `rm(list = ls())` - remove all variables from environment\n\n## Important function \n#### Packages\n\n- `install.packages()` to install packages\n- `library()` to load package into current R session.\n- `data()` to load data from package into environment\n- `sessionInfo()` - version info, packages for current R session \n\n## Important functions  \n####  Help\n\n- `?mean` - get help with a function\n- `help('mean')` - search help files for word or phrase\n- `help(package='tidyverse')` - find help for a package \n\n# Vectors\n\n\n## Vectors\n\nare fundamental data structures in R. There are two types:\n\n- **atomic vectors** - elements of the same data type\n- **lists** - elements refer to any object \n\n\n\n\n## Atomic vectors \n\nAtomic vectors can be one of six **data types**:\n\n|`typeof(x)` | examples |\n|-|---|\n| double | 3, 3.32 |\n| integer | 1L, 144L |\n| character | \"hello\", 'hello, world!'|\n| logical | TRUE, F |\n\n. . . \n\n*atomic* because they must contain only one type\n\n## Atomic vectors \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`double` \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(3.34)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n\n`integer` \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(3L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n`character` \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof('hello, world!')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n`logical` \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n\n:::\n\n::::\n\n\n\n## Create a vector\n\n\nwith `c()` for `concatenate`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(2,4,6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4 6\n```\n:::\n\n```{.r .cell-code}\nc(\"hello\", \"world\", \"!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello\" \"world\" \"!\"    \n```\n:::\n\n```{.r .cell-code}\nc(T, F, T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\nc(\"hello\", c(2, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello\" \"2\"     \"3\"    \n```\n:::\n:::\n\n\n\n## Create a vector\n\nwith sequences `seq()` or repetitions `rep()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# sequence of integers have a special shorthand\n6:10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  6  7  8  9 10\n```\n:::\n:::\n\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# sequence from, to, by \nseq(from=3, to=5, by=0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.0 3.5 4.0 4.5 5.0\n```\n:::\n:::\n\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# rep(x, times = 1, each = 1)\nrep(c(1,0), times = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 0 1 0 1 0 1 0\n```\n:::\n:::\n\n\n. . . \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# rep(x, times = 1, each = 1)\nrep(c(1,0), each = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 1 1 1 0 0 0 0\n```\n:::\n:::\n\n\n## Check data type\n\nwith `typeof(x)` - returns the type of vector x\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(3L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(\"three\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n\n## Check data type\n\nwith `is.*(x)` - returns `TRUE` if x has type `*`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.double(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.integer(3L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.character(\"three\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.logical(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Coercion, implicit\n\nIf you try to include elements of different types, R will coerce them into the same type without warning (**implicit coercion**)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, 2, \"three\", 4, 5 )\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"     \"2\"     \"three\" \"4\"     \"5\"    \n```\n:::\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n## Coercion, explicit\n\nYou can also use **explict coercion** to change a vector to another data type with `as.*()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, 0 , 1, 0)\nas.logical(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE FALSE\n```\n:::\n:::\n\n\n. . . \n\n::: aside\nhierarchy: character > double > integer > logical \n:::\n\n# More complex structures \n\n## More complex structures {.smaller}\n\nSome more complex data structures are **built from atomic vectors** by adding **attributes**:\n\n| Structure | Description | \n| -- | -------- |\n| `matrix` | vector with `dim` attribute representing 2 dimensions\n| `array` | vector with `dim` attribute representing n dimensions\n| `data.frame` | a named list of vectors (of equal length) with attributes for `names` (column names), `row.names`, and `class=\"data.frame\"` |\n\n## Create more complex structures \n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`matrix` \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix(0, nrow=2, ncol=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    0    0    0\n[2,]    0    0    0\n```\n:::\n:::\n\n\n\n\n\n`data.frame` \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(x=c(1,2,3), y=c('a','b','c'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x y\n1 1 a\n2 2 b\n3 3 c\n```\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n`array` \n\n\n::: {.cell}\n\n```{.r .cell-code}\narray(0, dim=c(2,3,2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    0    0    0\n[2,]    0    0    0\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    0    0    0\n[2,]    0    0    0\n```\n:::\n:::\n\n\n\n:::\n\n::::\n\n# Operations\n\n## Basic math operators\n\n\n| Operator | Operation |\n| -- | -- |\n| `()` | Parentheses | \n| `^` | Exponent | \n| `*` | Multiply | \n| `/` | Divide | \n| `+` | Add |\n `-` | Subtract |\n\n\n## Basic math operations\n\nfollow the order of operations you expect (PEMDAS)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# multiplication takes precedence\n2 + 3 * 10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32\n```\n:::\n\n```{.r .cell-code}\n# we can use paratheses to be explicit\n(2 + 3) * 10 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50\n```\n:::\n:::\n\n\n\n\n\n## Comparison operators\n\n| Operator | Comparison | \n| -- | -- |\n| `x < y` | less than |\n| `x > y` | greater than | \n| `x <= y` | less than or equal to | \n| `x >= y` | greater than or equal to |\n| `x != y` | not equal to | \n| `x == y` | equal to | \n\n## Comparison operators\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 2\ny <- 3\n```\n:::\n\n\n. . . \n\n<br> \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx < y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nx > y \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nx != y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nx == y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n## Logical operators \n\n| Operator | Operation | \n| -- | -- | \n| `x | y` | or |\n| `x & y` | and |\n| `!x` | not |\n| `any()` | true if any element meets condition | \n|`all()` | true if all elements meet condition | \n| `%in%` | true if any element is in following vector | \n\n## Logical operators \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- TRUE\ny <- FALSE\n```\n:::\n\n\n. . . \n\n<br> \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx | y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nx & y \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n!x \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nany(c(x,y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nall(c(x,y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n## Operations are vectorized \n\nAlmost all operations (and many functions) are vectorized \n\n. . .\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`math` \n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1, 2, 3) + c(4, 5, 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5 7 9\n```\n:::\n\n```{.r .cell-code}\nc(1, 2, 3) / c(4, 5, 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.25 0.40 0.50\n```\n:::\n\n```{.r .cell-code}\nc(1, 2, 3) * 10 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10 20 30\n```\n:::\n\n```{.r .cell-code}\nc(1, 2, 30) > 10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE  TRUE\n```\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n`logical` \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(TRUE, FALSE, FALSE)\ny <- c(TRUE, TRUE, FALSE)\nz <- TRUE\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx | y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\nx & y \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nx | z \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE TRUE\n```\n:::\n\n```{.r .cell-code}\nx & z \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE\n```\n:::\n:::\n\n\n:::\n\n::::\n\n\n\n## Operator coercion \n\nOperators and functions will also coerce values when needed (and without warning)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5.6 + 2L\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.6\n```\n:::\n\n```{.r .cell-code}\n10 + FALSE \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\nlog(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nlog(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n\n\n\n# Subsetting \n\n## Subsetting\n\n> Subsetting is a natural complement to str(). While str() shows you all the pieces of any object (its structure), subsetting allows you to pull out the pieces that you’re interested in. ~ Hadley Wickham, Advanced R\n\n`str()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"hello\", \"world\", \"!\")\nstr(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:3] \"hello\" \"world\" \"!\"\n```\n:::\n\n```{.r .cell-code}\ny <- c(1, 2, 3, 4, 5)\nstr(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:5] 1 2 3 4 5\n```\n:::\n:::\n\n\n## Subsetting\n\nThere are three operators for subsetting objects: \n\n- `[` - *subsets* (one or more) elements\n- `[[` and `$` - *extracts* a single element \n\n\n---\n## Subset multiple elements with `[` {.smaller}\n\n| Code | Returns |\n| ---- | -------- |\n| `x[c(1,2)]` | positive integers select elements at specified indexes |\n| `x[-c(1,2)]` | negative integers select all but elements at specified indexes |\n|`x[c(\"x\", \"y\")]` | select elements by name, if elements are named |\n| `x[]` |  nothing returns the original object |\n| `x[0]` | zero returns a zero-length vector |\n| `x[c(TRUE, TRUE)]` | select elements where corresponding logical value is TRUE |\n\n## Subset multiple elements with `[` {.smaller}\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`atomic vector`\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"hello\", \"world\", \"1\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx[c(1,2)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello\" \"world\"\n```\n:::\n\n```{.r .cell-code}\nx[-c(1,2)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"\n```\n:::\n\n```{.r .cell-code}\nx[]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello\" \"world\" \"1\"    \n```\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n`data.frame`\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- data.frame(\n        this = c(1, 2,3), \n        that = c(\"a\", \"b\", \"c\"),\n        theother = c(4, 5, 6)\n        )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ny[c(1,2)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  this that\n1    1    a\n2    2    b\n3    3    c\n```\n:::\n\n```{.r .cell-code}\ny[-c(1,2)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  theother\n1        4\n2        5\n3        6\n```\n:::\n\n```{.r .cell-code}\ny[c(\"this\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  this\n1    1\n2    2\n3    3\n```\n:::\n:::\n\n\n:::\n\n:::: \n\n\n\n## 3 ways to extract a single element {.smaller}\n\n| Code | Returns |\n| ---- | -------- |\n| `[[2]]` | a single positive integer (index) |\n| `[['name']]` | a single string  |\n| `x$name` | the `$` operator is a useful shorthand for `[['name']]` |\n\n## 3 ways to extract a single element {.smaller}\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`atomic vector`\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"hello\", \"world\", \"1\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello\"\n```\n:::\n\n```{.r .cell-code}\nx[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"world\"\n```\n:::\n\n```{.r .cell-code}\nx[[3]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"\n```\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n`data.frame`\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- data.frame(\n        this = c(1, 2,3), \n        that = c(\"a\", \"b\", \"c\"),\n        theother = c(4, 5, 6)\n        )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ny[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\ny[[\"that\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"b\" \"c\"\n```\n:::\n\n```{.r .cell-code}\ny$that\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"b\" \"c\"\n```\n:::\n:::\n\n\n:::\n\n:::: \n\n\n\n## R has many built-in functions\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, -2, 3)\n```\n:::\n\n. . . \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\nSome are vectorized\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.000000      NaN 1.098612\n```\n:::\n\n```{.r .cell-code}\nabs(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\nround(x, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1 -2  3\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\nSome are not\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6666667\n```\n:::\n\n```{.r .cell-code}\nmax(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nmin(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -2\n```\n:::\n:::\n\n\n:::\n\n:::: \n\n\n\n\n\n\n## Missing values {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`NA`\n\n- used to represent missing or unknown elements in vectors\n- Note that `NA` is contageous: expressions including `NA` usually return `NA`\n- Check for `NA` values with `is.na()`\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, NA, 3)\nis.na(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\nlength(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nmean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n`NULL` \n\n- used to represent an empty or absent vector of arbitrary type\n- `NULL` is its own special type and always has length zero and `NULL` attributes\n- Check for `NULL` values with `is.null()`\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c()\nis.null(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nlength(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nmean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n:::\n\n::::\n\n\n\n\n\n## Programming {.smaller}\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`functions`\n\nare reusable pieces of code that take some input, perform some task or computation, and return an output\n\n\n```r\nfunction(inputs){\n    # do something\n    return(output)\n}\n```\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n`control flow` \n\nrefers to managing the order in which expressions are executed in a program\n\n- `if`...`else` - if something is true, do this; otherwise do that\n- `for` loops - repeat code a specific number of times \n- `while` loops - repeat code as long as certain conditions are true\n- `break` - exit a loop early\n- `next` - skip to next iteration in a loop \n\n:::\n\n::::\n\n# Subsetting quirks \n\nIf we have time \n\n## Notes on `[` with higher dim objects \n\n::: {.cell}\n\n```{.r .cell-code}\nm <- matrix(1:6, nrow=2, ncol=3)\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# separate dimensions by comma \nm[1, 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n# omitted dim return all from that dim \nm[2, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4 6\n```\n:::\n\n```{.r .cell-code}\nm[ , 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4\n```\n:::\n:::\n\n## Notes on `[[` and `$`: {.smaller}\n\nboth `[[` and `[` work for vectors; use `[[`\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1, -2, 3)\nx[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nx[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n`$` does partial matching without warning\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(\n        this = c(1, 2,3), \n        that = c(\"a\", \"b\", \"c\"),\n        theother = c(4, 5, 6)\n        )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf[['theo']]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\ndf$theo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 5 6\n```\n:::\n:::\n\n# Questions?\n\nHave a great weekend!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}