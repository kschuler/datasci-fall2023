{
  "hash": "9df6d97bcff52d8e34eb216d0bd3c9fc",
  "result": {
    "markdown": "---\ntitle: \"Model Reliability\"\nsubtitle: \"Data Science for Studying Language and the Mind\"\nauthor: Katie Schuler\ndate: 11-07-2023\necho: true\nformat: \n    revealjs:\n        theme: white\n        slide-number: true\n        incremental: true \n        footer: \"[https://kathrynschuler.com/datasci](https://kathrynschuler.com/datasci/)\"\n---\n\n::: {.cell}\n\n:::\n\n\n## You are `here` {.smaller} \n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\n##### Data science with R \n::: {.nonincremental}\n- Hello, world!\n- R basics\n- Data importing\n- Data visualization\n- Data wrangling \n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### Stats & Model buidling\n::: {.nonincremental}\n- Sampling distribution\n- Hypothesis testing\n- Model specification\n- Model fitting \n- Model accuracy\n- `Model reliability`\n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### More advanced \n::: {.nonincremental}\n\n- Classification\n- Feature engineering (preprocessing) \n- Inference for regression\n- Mixed-effect models\n::: \n:::\n\n::::\n\n## Model building overview {.smaller}\n\n- **Model specification**: what is the form?\n- **Model fitting**: you have the form, how do you guess the free parameters? \n- **Model accuracy**: you've estimated the parameters, how well does that model describe your data? \n- `Model reliability`: when you estimate the parameters, there is some uncertainty on them\n\n# Dataset \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_n10 <- read_csv(\"http://kathrynschuler.com/datasets/model-reliability-sample10.csv\") \ndata_n200 <- read_csv(\"http://kathrynschuler.com/datasets/model-reliability-sample200.csv\") \n```\n:::\n\n\n##  {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n#### Explore the data\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n##### Specify a model \n\n- supervised learning | regression | linear\n- `y ~ x` \n- $y=w_0+w_1x_1$\n\n::: \n\n::::\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n##### Fit the model \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n::: \n\n::: {.column width=\"50%\"}\n\n##### Specify and fit with `infer`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_n10 %>%\n  specify(y ~ x) %>%\n  fit()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  term      estimate\n  <chr>        <dbl>\n1 intercept    1.75 \n2 x            0.733\n```\n:::\n:::\n\n\n\n::: \n\n::::\n\n\n## Model reliability asks:   {.smaller}\n\nHow certain can we be about the parameter estimates we obtained?\n\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nobserved_fit <- data_n10 %>%\n  specify(y ~ x) %>%\n  fit()\n\nobserved_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  term      estimate\n  <chr>        <dbl>\n1 intercept    1.75 \n2 x            0.733\n```\n:::\n:::\n\n\n. . . \n\nBut... why is there uncertainty around the parameter estimates at all?\n\n\n\n\n## Because of sampling error {.smaller}\n\nWe are interested in the model parameters that best describe the *population from which the sample was drawn* (not a given sample)\n\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n\n::: \n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n\n::: \n\n::::\n\n- Due to *sampling error*, we can expect some variability in the model parameters that describe a sample of data. \n\n## Model reliability  {.smaller}\n\n- We can think of model reliability as the *stability* of the parameters of a fitted model. \n- The more data we collect, the more reliable the model parameters will be. \n\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n\n::: \n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n\n::: \n\n::::\n\n## {.smaller}\n### Confidence intervals via bootstrapping \n\nWe can obtain confidence intervals around parameter estimates for models in the same we we did for point estimates like the mean: **bootstrapping**\n\n1. Draw bootstrap samples from the observed data\n2. Fit the model of interest to each bootstrapped sample \n3. Construct the sampling distribution of parameter estimates across bootstraps\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n\n::: \n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n\n::: \n\n::::\n\n\n\n## {.smaller}\n### The more data we collect, the more reliable\n \n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n\n::: \n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n\n::: \n\n::::\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n\n::: \n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n\n::: \n\n::::\n\n## {.smaller}\n### The more data we collect, the more reliable\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-17-2.png){width=960}\n:::\n:::\n\n\n## {.smaller}\n### Confidence intervals with `infer`\n\n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\nFit bootstraps\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboot_fits <- data_n200 %>%\n  specify(y ~ x) %>%\n  generate(\n    reps = 1000, \n    type = \"bootstrap\"\n  ) %>%\n  fit()\n\nhead(boot_fits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n# Groups:   replicate [3]\n  replicate term      estimate\n      <int> <chr>        <dbl>\n1         1 intercept    1.84 \n2         1 x            0.485\n3         2 intercept    1.95 \n4         2 x            0.585\n5         3 intercept    1.82 \n6         3 x            0.332\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"33%\"}\n\nGet confidence interval\n\n\n::: {.cell}\n\n```{.r .cell-code}\nci <- boot_fits %>%\n  get_confidence_interval(\n    point_estimate = observed_fit, \n    level = 0.95\n  )\n\nci \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  term      lower_ci upper_ci\n  <chr>        <dbl>    <dbl>\n1 intercept    1.78     2.06 \n2 x            0.362    0.634\n```\n:::\n:::\n\n\n\n::: \n\n::: {.column width=\"33%\"}\n\nVisualize distribution & ci \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbootstrapped_fits %>%\n  visualize() +\n  shade_ci(endpoints = ci) \n```\n\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n::: \n::::  \n\n## \n\n![](/include/figures/acc-reliable.png)\n\n<!-- ## \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](model-reliability_files/figure-revealjs/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n -->\n",
    "supporting": [
      "model-reliability_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}