{
  "hash": "c68874607503ee95549f2bc81cd28918",
  "result": {
    "markdown": "---\ntitle: \"Data visualization\"\ndate: 09/12/2023\nauthor: Katie Schuler\n\n---\n\n\n::: {.callout-warning title=\"Under Construction\"}\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Setup code\"}\nlibrary(tidyverse)\nlibrary(languageR)\n```\n:::\n\n\n<!-- ## Why visualize data?\n\n- why visualize. grammar of graphics. installing?  -->\n\n## Visualization with ggplot2\n\nThere are many ways to visualize data with R. One great option is [`ggplot2`](https://ggplot2.tidyverse.org/), one of the core pacakges in the `tidyverse`.\n\n- `ggplot2` makes use of a system for describing and creating graphics known as the layered **grammar of graphics** \n- learning this one simple system allows you to generate many different types of plots\n\nTo create a plot with `ggplot2`, you call the function `ggplot()`, which creates a **plot object** Then you add **layers** to the object. There are 3 basic requirements for every ggplot:\n\n1. **data** - what dataset are you ploting? Including only data generates an empty canvas \n2. **aesthetics** - define how variables in your dataset are mapped to visual properties in the plot\n3. **geoms** - determine the geometrical object that a plot uses to represent the data\n\nWe can think of the following as a basic template for any ggplot:\n\n```r\nggplot(\n    data = <DATA>,\n    mapping = aes(<MAPPINGS>)\n) + \n <GEOM_FUNCTION>\n```\n\nOne common **warning** you will encounter is about missing values. `ggplot2` will always let you know that some of your data could not be plotted in the way you specified. Usually this is good to know, but nothing to worry about: \n\n> Removed n rows containing missing values \n\n\nWe won't cover everything you can do with ggplot2 (that would be a lot!) In lecture we'll demo the most common features, but you should feel comfortable using [ggplot2's function reference](https://ggplot2.tidyverse.org/reference/) to figure out how to do other things.\n\n\n## Aesthetics \n\nThere are two ways we can determine the aesthetics of a plot: \n\n- **mapping** allows us to determine aesthetics based on a variable, which are passed as arguments. e.g. `mapping=aes(color=var)`. \n- **setting** allows us to set aesthetics to a constant value, which are passed as their own argument e.g. `color=var`\n\nWhen we **map** categorical variables to aesthetics, ggplot2 assigns a unique value of the aesthetic to each unique value of the variable. \n\n- This process is known as **scaling**; we can override the scale ggplot2 selected by adding a [`scales`](#scales) layer.\n- ggplot2 also automatically creates a legend to describe the mapping for us (except for x and y aesthetics, where ggplot2 simply creates the axis -- no legend is necessary). \n\nWhen we **set** aesthetics, we must select the value for the aesthetic manually. \n\n- **color** and **fill** - set name of a color as a string, e.g. `color=\"blue\"`\n- **alpha** - set value between 0 and 1, where 0 is most transparent, e.g. `alpha=0.5`\n- **size** - set size of point in mm, e.g. `size=1`\n- **shape** - set shape of point as a number 1-25, e.g. `shape=1`. There are 25 built in shapes (see below)\n- **linetype** - a name of \"blank\", \"solid\", \"dashed\", \"dotted\", \"dotdash\", \"longdash\", \"twodash\", e.g. `linetype=\"dotted\"`\n\n![from R4DS's figure 10.1 showing the available shapes](/include/figures/shapes-r4ds.png){#fig-shapes}\n\nThere are **3 common warnings** people encounter when **mapping categorical variables** \n\n> 1. The shape palette can deal with a maximum of 6 discrete values\n> 2. Removed n rows containing missing values\n> 3. Using alpha for a discrete value is not advised.\n\n- The first two happen when mapping **shape**, because by default ggplot2 will use no more than 6 shapes at a time (and any additional levels are discarded)\n- The last one happens when mapping **size** or **alpha**, because it is strange to map  an unordered categorical variable to an ordered aesthetic. Size and alpha imply there is some ranking but there is none!\n\n\n\n## Geoms \n\n**Geoms** are the geometric objects used to represent the data in your plot. To change the geom, simply change the geom function\n\n- `geom_histogram()` - histogram, distribution of a continuous variable\n- `geom_density()` - distribution of a continuous variable\n- `geom_bar()`- distribution of categorical data\n- `geom_point()` - scatterplot\n- `geom_smooth()` - smoothed line of best fit \n- [All available geoms](https://ggplot2.tidyverse.org/reference/#geoms)\n\n**Mapping and data**: Every geom function takes a **mapping** argument and a **data** argument, both can be defined either globally in the `ggplot()` layer or locally in the geom layer. When defining mappings or data locally in the geom layer, remember:\n\n- they are *local*, meaning they only apply to *that specific layer* \n- they will extend or override any *global* mappings or data you specified in `ggplot()`\n- they (usefully!) allow you to specify different aesthetics or data in different layers\n\n**Position**: Every geom also takes a **position** argument, which adjusts the position of the geom. We will encounter this most often in `geom_bar()` and `geom_point()`:\n\n- For `geom_bar()`, the default position is **stacked**, e.g. `position=\"stacked\"`, but there are 3 other options: (1) **dodge** would place overlapping bars next to each other, (2) **fill** would make each set of stacked bars the same height (a relative frequency plot), (3) **identity** would make the bars overlapping (which isn't very useful -- we'd only see the tallest one!)\n\n- For `geom_point()`, set `position=\"jitter\"` to add a small amount of random noise to each point, which speads them out! Technically makes your plot less accurate, but can also reveal important information. (`geom_jitter()` is shorthand for `geom_point(position=\"jitter\")`)\n\n**Stat**: All geoms also take a **stat** argument, which is short for **statistical transformation**. Many geoms have `stat=\"identity\"` as their default argument, which means they plot the raw (untransformed) data from your dataset (`geom_point()` is one of them!). But some geoms *do* calculate new values to plot by default. For example:\n\n- `geom_bar()` and `geom_histogram()` bin the data and plot the **bin counts** (the number of points that fall in each bin) by default\n- `geom_smooth()` fits a model to your data and plots the prediction from the model \n- `geom_boxplot()` computes the five-number summary of the distribution (more on this next week!) and then display that number as a summary\n\nUsually we use the default stat, so we don't need to specify it at all. But sometimes when making `geom_bar()` plots, we want to override the default to `stat=\"identity\"` to make the height of the bars map to the raw values of a y variable.\n\n**Other geom-specific arguments**: Certain geoms make frequent use of other more specific arguments. Two we will encounter often are:\n\n- For `geom_smooth()`, we set the smoothing method with the **method** argument, e.g. `method=\"lm\"`\n- For `geom_histogram()`, we set the number of bins with the **bins** argument or the width of the bins with the **binwidth** argument, e.g. `binwidth=30`. \n\n\n## Other layers \n\nThere are many other layers that can be specified in ggplot2 to create more complex plots. I find this figure helpful in understanding the layered nature of the **grammar of graphics**: \n\n![Adapeted from The Grammar of Graphics by Leland Wilkinson](/include/figures/gglayers.png){#fig-gglayers width=40%}\n\nBelow we'll outline some common uses for the following layers. We demoed most of this in class, but a few of them might be new to you!\n\n- **facets** - display subsets of data\n- **labels** - modifies axis, legend and plot labels\n- **themes** - overall visuals\n- **scales** - map data values to visual values of aestetic\n\n### Facets \n\nFacets are smaller plots that display different subsets of the data. They are often used as an alternative to aesthetics to plot additional categorical variables. \n\n- `facet_wrap(~var)` - splits a plot into subplots based on a categorical variable; each subplot displays a subset of the data. The **ncol** argument takes a number and specifies the number of columns. \n- `facet_grid(rows~cols)` - splits a plot into subplots with the combination of two variables, one as the rows of the facet and one as the columns. To leave off rows (or cols), use the `.`, e.g. `facet_grid(.~species)`\n- `scales` - by default facets share the same scale and range for x and y aesthetics. Set the `scales` argument to \"free\" to allow for different axis scales, e.g. `scales=\"free\"`\n\n\n### Labels \n\nThe `labs()` functions allows you to modify axis, legend, and plot labels. `labs()` takes several arguments. \n\nSome are a straightforward name, like: \n\n- **title** - plot title\n- **subtitle** - plot subtitle \n- **caption** - caption at bottom right of plot\n\nOthers are mapped to aesthetics, like: \n\n- **x** - the x axis label\n- **y** - the y axis label\n- **color** - the legend for the color aesthetic\n- **size** - the legend for the size aesthetic\n\n### Themes \n\nggplot2 comes with many [complete themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) which control how everything is displayed (except data!). A few favorites include:\n\n- `theme_gray()` - the default\n- `theme_bw()` - classic dark-on-light theme\n- `theme_minimal()` - minimal theme with no backgroun annotations \n- `theme_classic()` - a classic looking theme with no gridelines\n\nThemes take a few arguments, two of which we may use in the class: \n\n- **base_size** - base font size, given in pts \n- **base_family** - base font family to use \n\n\n### Scales \n\n[Scales](https://ggplot2.tidyverse.org/reference/#scales) control the details of how data values are translated to visual properties. Adding a scale layer overrides the default scales that ggplot2 uses automatically. For example: \n\n- `scale_color_brewer()` - changes the color scale\n- `scale_fill_manual()` - also changes the color, set to manual values with **values** argument, e.g. `values=c(\"green\", \"blue\", \"red\")`\n\n\n## Shortcuts \n\nWhen calling ggplot2 (or any function!) we can specify argument names explicitly or leave them off (implicit). Leaving off the names makes code more conscise, so you'll typically see it that way.\n\n- **explicit** naming of arguments allow us to write them in any order (because we indicate them to ggplot2 by their name)\n\n    ```r\n    ggplot(\n        data = my_data,\n        mapping = aes(x = weight, y = height)\n    )\n    ```\n\n- **implict** argument names means we have to specify them in a perscribed order (data first!) so ggplot2 can identify them without their name\n\n    ```r\n    ggplot(\n        my_data,\n        aes(x = weight, y = height)\n    )\n    ```\n\nAnother shortcut you'll encounter is **the pipe operator**, `%>%`. The pipe takes the thing on its left and passes it along to the function on its right (as the function's first argument) \n\n- `x %>% y` is equivalent to `f(x, y)`\n- since the first argument to ggplot() is data, you'll typically see the pipe used like this:\n\n    ```r\n    my_data %>% \n    ggplot(\n        aes(x = weight, y = height)\n    )\n    ```\n\n## Saving plots \n\nOften we want to save a plot (to add it to a presentation or paper). We can accomplish this with `ggsave()`. \n\n```r\n# save your most recent plot with the name\nggsave(\"myfigurename.png\")\n\n# specify the width and height; can also specify which units you mean\nggsave(\"myfigurename.png\", width = 4, height = 4)\nggsave(\"mtcars.pdf\", width = 20, height = 20, units = \"cm\")\n```\n\nIn Google Colab, you can find your saved plot by clicking the file icon on the left side bar. \n\n\n## Further reading \n\nRecommended further reading: \n\n- [Ch 2 Data visualization](https://r4ds.hadley.nz/data-visualize) in R for Data Science\n- https://moderndive.com/2-viz.html\n- [Ch 10 Layers](https://r4ds.hadley.nz/layers) in R for Data Science\n\nOther useful resources:\n\n- [ggplot2 function reference](https://ggplot2.tidyverse.org/reference)\n- [ggplot2 cheat sheet](https://ggplot2.tidyverse.org/#cheatsheet)\n- [introduction to palmerpenguins](https://allisonhorst.github.io/palmerpenguins/articles/intro.html) \n\n\n\n",
    "supporting": [
      "data-visualization_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}