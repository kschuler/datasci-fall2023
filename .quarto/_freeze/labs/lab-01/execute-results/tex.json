{
  "hash": "1755ede742e1308425d09c29b2a86429",
  "result": {
    "markdown": "---\ntitle:  \"Lab 1: Getting started with R\"\nsubtitle: \"Not graded, just practice\"\n\n---\n\n\n\nTo learn to program in R (or any language), you can read about how to do it, and watch someone else do it; but the only way to really learn is to do it yourself. Create some data structures, try some stuff, and see what happens! Here are some practice quiz questions to guide your learning. We will go over the solutions to these in lab.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Google Colab\n\nTrue or false? We start a new R notebook in Google Colab with `File > New notebook`\n\n\n\n\n* (A) True  \n* (B) False  \n\n\n\nFor problem sets, how will you submit your colab notebook for grading? \n\n\n\n\n* (A) `File > Download > Download .ipynb`, then upload to Gradescope  \n* (B) `File > Download > Download .ipynb`, then upload to Canvas  \n* (C) `File > Download > Download .py`, then upload to Gradescope  \n* (D) `File > Download > Download .py`, then upload to Canvas  \n\n\n\nWhat version of R is Google Colab running? Hint: use `sessionInfo()`.\n\n\n\n____________________\n\n\n\nWhat is the relationship between R and Google Colab?\n\n\n\n\n* (A) R is a programming language. Google Colab is a smaller, specific version of R.  \n* (B) R is a programming language. Google Colab is a development environment where you can run R  \n* (C) R and Google Colab are both programming languages.  \n* (D) R is a paid (proprietary) programming language. Google Colab is a free service to run R.  \n\n\n\n## R Basics\n\n\nWhich of the following are expressions? \n\n\n\n\n* (A) 10  \n* (B) 5 + 10  \n* (C) x <- 5 + 10  \n* (D) x <- y + 10  \n* (E) mean(x)  \n\n\n\nWhich of the following are valid variable names in R? \n\n\n\n\n* (A) childAge  \n* (B) response_time  \n* (C) 1stPlaceWinner  \n* (D) 2fast2furious  \n* (E) pi  \n\n\n\n\nSuppose we open a new colab notebook and run the following code block. What will be returned?\n\n```r\nx <- 1 + 2\ny <- 0 + 3\nls()\n```\n\n\n\n\n* (A) 3  \n* (B) x=3 • y=3  \n* (C) &apos;x&apos; • &apos;y&apos;   \n* (D) mean(c(1,3,5)) • median(c(1,3,5))  \n\n\n\nWhich of the following will load the `emo` package into the current environment? \n\n\n\n\n* (A) install.packages(&apos;emo&apos;)  \n* (B) library(emo)  \n* (C) data(emo)  \n* (D) attributes(emo)  \n\n\n\nWhich of the following occur in the code block below? \n\n```r\n# compute the mean of x and y\nmean(c(x,y))\n```\n\n\n\n* (A) a message  \n* (B) a function  \n* (C) a comment  \n* (D) an expression  \n\n\n\n## Vectors\n\nSuppose we construct a vector with `c(1, \"two\", 3, 4, 5, 6)` and assign it to `x`. What will the following code block return? \n\n```r\ntypeof(x)\n```\n\n\n\n____________________\n\n\n\nWhat is the previous question an example of? \n\n\n\n\n* (A) attribute addition  \n* (B) explicit coercion  \n* (C) implicit coercion  \n* (D) none of the above  \n\n\n\nWhat will the following code block return? \n\n```r\nx <- 1:4\ny <- matrix(x, ncol=2, nrow=2)\ntypeof(y)\n\n```\n\n\n\n____________________\n\n\n\n\nWhat will the following code block return? \n\n```r\nx <- c()\nlength(x)\n```\n\n\n\n____________________\n\n\n\n\nGiven the following output from `str(x)`, what will `as.logical(x)` return? \n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n num [1:4] 1 0 1 0\n```\n:::\n:::\n\n\n* (A) an error  \n* (B) TRUE • FALSE • TRUE • FALSE  \n* (C) FALSE  \n* (D) FALSE • TRUE • FALSE • TRUE  \n\n\n\nGiven the following vector, what will `as.double(x)` return? \n\n```r\nx <- c(\"one\", \"two\", \"three\")\n```\n\n\n\n\n* (A) an error  \n* (B) 1 • 2 • 3  \n* (C) 2 • 4 • 6  \n* (D) &apos;one&apos; • &apos;two&apos; • &apos;three&apos;  \n\n\n\n\n\nWhat happens if you add a vector of numbers to a single number in the following expression?\n\n```r\nc(1, 3, 5) + 1\n```\n\n\n\n\n* (A) 2 • 3 • 5  \n* (B) Error: length mismatch  \n* (C) 1 • 3 • 5 • 1  \n* (D) 2 • 4 • 6  \n\n\n\nWhat happens if you multiply a vector times another vector? \n\n```r\nc(1, 3, 5) * c(10, 100, 1000)\n```\n\n\n\n\n* (A) 10 • 300 • 5000  \n* (B) Error: length mismatch  \n* (C) 10 • 30 • 50 • 100 • 300 • 500 • 1000 • 3000 • 5000  \n* (D) a 2 x 3 matrix  \n* (E) Error: cannot multiply vectors  \n\n\n\nSuppose we run the following code.  What will `any(x)` return? \n\n```r\nx <- c(1, 5, 11) > 10\n\n```\n\n\n\n\n* (A) TRUE  \n* (B) FALSE  \n* (C) Error: vector is double but requires logical  \n\n\n\n## Subsetting\n\nWhich of the following code subsets the vector `x <- c(\"blue\", \"pink\", \"red\")` to return just the first element?\n\n\n\n\n* (A) x[1]  \n* (B) x[[1]]  \n* (C) x[0]  \n* (D) x[-c(2, 3)]  \n* (E) x[\"blue\"]  \n\n\n\nSuppose we run the following code. What will `x[[2]]` return?\n\n```r\nx <- seq(from = 2, to =8, by=2)\n```\n\n\n____________________\n\n\n\n\nSuppose we run the following code. What will `m[1, 2]` return?\n\n```r\nm <- matrix(c(10,20,30,40), nrow=2, ncol=2)\n```\n\n\n\n\n____________________\n\n\n<!---\n \nTHERE ARE FROM BEFORE webexerciser\n\nSuppose we run the following code block. What will `typeof(x)` return? What about `length(x)`? Explain why.\n\n    ```r\n    x <- data.frame(x=c(1,2,3), y=c(\"a\",\"b\",\"c\"))\n    length(x)\n    ```\n\n1. Suppose we run the following code. What will `y` return? What about `typeof(y)`?\n\n    ```r\n    x <- c(2,4,6)\n    y <- x * 2   \n    ```\n\n## Coercion\n\nWhat will the following code block return? \n\n```r\nx <- c(1, 'two', 3, 4, 5, 6)\ntypeof(x)\n```\n\n\n## Subsetting\n\n\n1. Suppose `m` is a matrix created with `matrix(c(1,2,3,4), nrow=2, ncol=2)`. What will each of the following operations return?\n    - `m[c(1), ]`\n    - `m[c(2), c(1, 2)]`\n    - `m[]`\n    - `m[[2]]`\n\n1. Suppose `df` is a data frame created with `data.frame(x=c(1,2,3), y=c(\"a\",\"b\",\"c\"))`. What will each of the following operations return?\n    - `df[c(1,2)]`\n    - `df[c(1,2), c(2)]`\n    - `df[['x']]`\n    - `df[x]`\n    - `df[[2]]`\n\n1. Suppose `df` is a dataframe with column names `ageChild`, `ageParent`, and `dateAdded`. What will `df$age` return?  Explain why.\n\nSuppose we create a vector including every letter in the alphabet and assign it to `x`. What will the following code return? \n\n```r\ny <- as.logical(x)\ny[[1]]\n```\nNA or <NA> \n\n## Programming in R\n1. Explain in one sentence the difference between a `for` loop and a `while` loop?  \n--->\n",
    "supporting": [
      "lab-01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}