{"title":"Model Reliability","markdown":{"yaml":{"title":"Model Reliability","subtitle":"Data Science for Studying Language and the Mind","author":"Katie Schuler","date":"11-07-2023","echo":true,"format":{"revealjs":{"theme":"white","slide-number":true,"incremental":true,"footer":"[https://kathrynschuler.com/datasci](https://kathrynschuler.com/datasci/)"}}},"headingText":"You are `here`","headingAttr":{"id":"","classes":["smaller"],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n```{r}\n#| echo: false\n#| message: false\n\nlibrary(tidyverse)\nlibrary(tidymodels)\n\ntheme_set(theme_classic(base_size = 24))\ntheme_update(plot.title = element_text(hjust = 0.5)) \n\n```\n\n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\n##### Data science with R \n::: {.nonincremental}\n- Hello, world!\n- R basics\n- Data importing\n- Data visualization\n- Data wrangling \n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### Stats & Model buidling\n::: {.nonincremental}\n- Sampling distribution\n- Hypothesis testing\n- Model specification\n- Model fitting \n- Model accuracy\n- `Model reliability`\n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### More advanced \n::: {.nonincremental}\n\n- Classification\n- Feature engineering (preprocessing) \n- Inference for regression\n- Mixed-effect models\n::: \n:::\n\n::::\n\n## Model building overview {.smaller}\n\n- **Model specification**: what is the form?\n- **Model fitting**: you have the form, how do you guess the free parameters? \n- **Model accuracy**: you've estimated the parameters, how well does that model describe your data? \n- `Model reliability`: when you estimate the parameters, there is some uncertainty on them\n\n# Dataset \n\n```{r}\ndata_n10 <- read_csv(\"http://kathrynschuler.com/datasets/model-reliability-sample10.csv\") \ndata_n200 <- read_csv(\"http://kathrynschuler.com/datasets/model-reliability-sample200.csv\") \n```\n\n##  {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n#### Explore the data\n\n```{r}\n#| echo: false \n\nggplot(\n  data = data_n10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n # geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE) +\n  labs(caption = \"n = 10\") +\n  theme_classic(base_size = 36)\n  #coord_cartesian(ylim = c(0,4), xlim = c(-3, 3)) \n\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n##### Specify a model \n\n- supervised learning | regression | linear\n- `y ~ x` \n- $y=w_0+w_1x_1$\n\n::: \n\n::::\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n##### Fit the model \n\n```{r}\n#| echo: false \n\nggplot(\n  data = data_n10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE) +\n  labs(caption = \"n = 10\") +\n  theme_classic(base_size = 36)\n  #coord_cartesian(ylim = c(0,4), xlim = c(-3, 3)) \n\n```\n\n::: \n\n::: {.column width=\"50%\"}\n\n##### Specify and fit with `infer`\n\n```{r}\n#| echo: true\n\ndata_n10 %>%\n  specify(y ~ x) %>%\n  fit()\n\n```\n\n\n::: \n\n::::\n\n\n## Model reliability asks:   {.smaller}\n\nHow certain can we be about the parameter estimates we obtained?\n\n\n\n```{r}\n#| echo: true\n#| output-location: column-fragment\n\nobserved_fit <- data_n10 %>%\n  specify(y ~ x) %>%\n  fit()\n\nobserved_fit\n\n```\n\n. . . \n\nBut... why is there uncertainty around the parameter estimates at all?\n\n\n\n\n## Because of sampling error {.smaller}\n\nWe are interested in the model parameters that best describe the *population from which the sample was drawn* (not a given sample)\n\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n```{r}\n#| echo: false\n\n\n\nggplot(\n  data = data_n10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE, linewidth =2) +\n  labs(title = \"Fit the model to our sample\") \n  #coord_cartesian(ylim = c(0,4), xlim = c(-3, 3)) \n\n```\n\n\n::: \n\n::: {.column width=\"50%\"}\n\n\n\n```{r}\n#| echo: false\n\n# generate some data \nset.seed(44)\nw0 = 2\nw1 = 0.5\n\ndata_another10 <- tibble(\n  x = rnorm(10, sd = 1), \n  y = w0 + (w1*x) + rnorm(10, sd = 1)\n)\n\nggplot(\n  data = data_another10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", alpha = 0.5, size = 3) +\n  geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE, linewidth =2, alpha = 0.5) +\n  labs(title = \"Fit the same model to a different sample\")\n\n\n```\n\n\n::: \n\n::::\n\n- Due to *sampling error*, we can expect some variability in the model parameters that describe a sample of data. \n\n## Model reliability  {.smaller}\n\n- We can think of model reliability as the *stability* of the parameters of a fitted model. \n- The more data we collect, the more reliable the model parameters will be. \n\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n```{r}\n#| echo: false\n\n\n\nggplot(\n  data = data_n10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n geom_smooth(method = \"lm\", formula = \"y ~ x\", level = 0.95, linewidth =2) +\n  labs(title = \"Fit the model to 10 data points\") \n  #coord_cartesian(ylim = c(0,4), xlim = c(-3, 3)) \n\n```\n\n\n::: \n\n::: {.column width=\"50%\"}\n\n\n\n```{r}\n#| echo: false\n\nggplot(\n  data = data_n200,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", alpha = 0.5, size = 3) +\n  geom_smooth(method = \"lm\", formula = \"y ~ x\", level = 0.95, linewidth =2, alpha = 0.5) +\n  labs(title = \"Fit the model to 200 data points\")\n\n\n```\n\n\n::: \n\n::::\n\n## {.smaller}\n### Confidence intervals via bootstrapping \n\nWe can obtain confidence intervals around parameter estimates for models in the same we we did for point estimates like the mean: **bootstrapping**\n\n1. Draw bootstrap samples from the observed data\n2. Fit the model of interest to each bootstrapped sample \n3. Construct the sampling distribution of parameter estimates across bootstraps\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n```{r}\n#| echo: false\n\nbootstrapped_fits <- data_n10 %>%\n  specify(y ~ x) %>%\n  generate(reps = 1000, type = \"bootstrap\") %>%\n  fit()\n\nbootstrapped_fits_wide <- bootstrapped_fits %>%\n  spread(term, estimate)\n\nggplot(\n  data = data_n10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n  geom_abline(data = bootstrapped_fits_wide,\n     aes(slope =  x, intercept = intercept, group = replicate), alpha = 0.05)  +\n  #geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE, linewidth = 2) +\n  labs(caption = \"n = 10\", title = \"Bootstrapped model fits\")\n\n```\n\n\n::: \n\n::: {.column width=\"50%\"}\n\n\n\n```{r}\n#| echo: false\n\nci <- bootstrapped_fits %>%\n  get_confidence_interval(\n    point_estimate = observed_fit, level = 0.95\n  )\n\n  bootstrapped_fits %>%\n  visualize() +\n  shade_ci(endpoints = ci)\n\n\n```\n\n\n::: \n\n::::\n\n\n\n## {.smaller}\n### The more data we collect, the more reliable\n \n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n```{r}\n#| echo: false\n\nbootstrapped_fits_10 <- data_n10 %>%\n  specify(y ~ x) %>%\n  generate(reps = 1000, type = \"bootstrap\") %>%\n  fit()\n\nbootstrapped_fits_wide_10 <- bootstrapped_fits_10 %>%\n  spread(term, estimate)\n\nggplot(\n  data = data_n10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n  geom_abline(data = bootstrapped_fits_wide_10,\n     aes(slope =  x, intercept = intercept, group = replicate), alpha = 0.05)  +\n  #geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE, linewidth = 2) +\n  labs(title = \"Bootstrapped model fits (n=10)\")\n\n```\n\n\n::: \n\n::: {.column width=\"50%\"}\n\n\n\n```{r}\n#| echo: false\n\nci <- bootstrapped_fits_10 %>%\n  get_confidence_interval(\n    point_estimate = observed_fit, level = 0.95\n  )\n\n  bootstrapped_fits_10 %>%\n  visualize() +\n  shade_ci(endpoints = ci)\n\n\n```\n\n\n::: \n\n::::\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n```{r}\n#| echo: false\n\nbootstrapped_fits_200 <- data_n200 %>%\n  specify(y ~ x) %>%\n  generate(reps = 1000, type = \"bootstrap\") %>%\n  fit()\n\nbootstrapped_fits_wide_200 <- bootstrapped_fits_200 %>%\n  spread(term, estimate)\n\nggplot(\n  data = data_n200,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n  geom_abline(data = bootstrapped_fits_wide_200,\n     aes(slope =  x, intercept = intercept, group = replicate), alpha = 0.05)  +\n  #geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE, linewidth = 2) +\n  labs(title = \"Bootstrapped model fits (n=200)\")\n\n```\n\n\n::: \n\n::: {.column width=\"50%\"}\n\n\n\n```{r}\n#| echo: false\n\nobserved_fit_200 <- data_n200 %>%\n  specify(y ~ x) %>%\n  fit()\n\nci <- bootstrapped_fits_200 %>%\n  get_confidence_interval(\n    point_estimate = observed_fit_200, level = 0.95\n  )\n\n  bootstrapped_fits_200 %>%\n  visualize() +\n  shade_ci(endpoints = ci) \n\n\n```\n\n\n::: \n\n::::\n\n## {.smaller}\n### The more data we collect, the more reliable\n\n```{r}\n#| echo: false\n#| layout-ncol: 2\n\nbootstrapped_fits_10 %>%\n  ggplot(\n  mapping = aes(x  = term, y = estimate)\n) +\n  geom_point(alpha = 0.1, size = 2) + \n  geom_point(data = observed_fit, mapping = aes(x = term, y = estimate), color = \"blue\", size = 8) +\n  labs(title = \"Fit to 10 data points\", x = \"parameter\" ) +\n  coord_cartesian(ylim = c(-0.5, 3.5))\n\nbootstrapped_fits_200 %>%\n  ggplot(\n  mapping = aes(x  = term, y = estimate)\n) +\n  geom_point(alpha = 0.1, size = 2) + \n  geom_point(data = observed_fit_200, mapping = aes(x = term, y = estimate), color = \"blue\", size = 8) +\n  labs(title = \"Fit to 200 data points\", x = \"parameter\" ) +\n    coord_cartesian(ylim = c(-0.5, 3.5))\n\n\n```\n\n## {.smaller}\n### Confidence intervals with `infer`\n\n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\nFit bootstraps\n\n```{r}\n#| echo: true\nboot_fits <- data_n200 %>%\n  specify(y ~ x) %>%\n  generate(\n    reps = 1000, \n    type = \"bootstrap\"\n  ) %>%\n  fit()\n\nhead(boot_fits)\n\n```\n\n:::\n\n::: {.column width=\"33%\"}\n\nGet confidence interval\n\n```{r}\n#| echo: true\nci <- boot_fits %>%\n  get_confidence_interval(\n    point_estimate = observed_fit, \n    level = 0.95\n  )\n\nci \n\n```\n\n\n::: \n\n::: {.column width=\"33%\"}\n\nVisualize distribution & ci \n\n```{r}\n#| echo: true\nbootstrapped_fits %>%\n  visualize() +\n  shade_ci(endpoints = ci) \n\n\n```\n\n::: \n::::  \n\n## \n\n![](/include/figures/acc-reliable.png)\n\n<!-- ## \n\n\n```{r}\n#| echo: false\n\n# generate some data \nset.seed(44)\nw0 = 2\nw1 = 0.5\n\ndata_another10 <- tibble(\n  x = rnorm(10, sd = 1), \n  y = w0 + (w1*x) + rnorm(10, sd = 1)\n)\n\nggplot(\n  data = data_another10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n  geom_abline(\n     aes(slope =  0.5, intercept = 2), linewidth = 2)  +\n  geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE, linewidth =1) +\n  labs(title = \"Fit the model to another sample\")\n\n\n```\n\n\n```{r}\n#| echo: false\n\ntwenty_fits <- data_n10 %>%\n  specify(y ~ x) %>%\n  generate(reps = 20, type = \"bootstrap\") %>%\n  fit()\n\ntwenty_fits_wide <- twenty_fits %>%\n  spread(term, estimate)\n\nggplot(\n  data = data_n10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3, alpha = 0.25) +\n  geom_abline(data = twenty_fits_wide,\n     aes(slope =  x, intercept = intercept, group = replicate), alpha = 0.25, linewidth = 1)  +\n  geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE, linewidth = 1) +\n  labs(title = \"Sampling \")\n\n\n```\n\n\n```{r}\n#| echo: false \n\nggplot(\n  data = data_n10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE) +\n  labs(caption = \"n = 10\")\n  #coord_cartesian(ylim = c(0,4), xlim = c(-3, 3)) \n\n```\n -->\n","srcMarkdownNoYaml":"\n\n```{r}\n#| echo: false\n#| message: false\n\nlibrary(tidyverse)\nlibrary(tidymodels)\n\ntheme_set(theme_classic(base_size = 24))\ntheme_update(plot.title = element_text(hjust = 0.5)) \n\n```\n\n## You are `here` {.smaller} \n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\n##### Data science with R \n::: {.nonincremental}\n- Hello, world!\n- R basics\n- Data importing\n- Data visualization\n- Data wrangling \n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### Stats & Model buidling\n::: {.nonincremental}\n- Sampling distribution\n- Hypothesis testing\n- Model specification\n- Model fitting \n- Model accuracy\n- `Model reliability`\n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### More advanced \n::: {.nonincremental}\n\n- Classification\n- Feature engineering (preprocessing) \n- Inference for regression\n- Mixed-effect models\n::: \n:::\n\n::::\n\n## Model building overview {.smaller}\n\n- **Model specification**: what is the form?\n- **Model fitting**: you have the form, how do you guess the free parameters? \n- **Model accuracy**: you've estimated the parameters, how well does that model describe your data? \n- `Model reliability`: when you estimate the parameters, there is some uncertainty on them\n\n# Dataset \n\n```{r}\ndata_n10 <- read_csv(\"http://kathrynschuler.com/datasets/model-reliability-sample10.csv\") \ndata_n200 <- read_csv(\"http://kathrynschuler.com/datasets/model-reliability-sample200.csv\") \n```\n\n##  {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n#### Explore the data\n\n```{r}\n#| echo: false \n\nggplot(\n  data = data_n10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n # geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE) +\n  labs(caption = \"n = 10\") +\n  theme_classic(base_size = 36)\n  #coord_cartesian(ylim = c(0,4), xlim = c(-3, 3)) \n\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n##### Specify a model \n\n- supervised learning | regression | linear\n- `y ~ x` \n- $y=w_0+w_1x_1$\n\n::: \n\n::::\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n##### Fit the model \n\n```{r}\n#| echo: false \n\nggplot(\n  data = data_n10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE) +\n  labs(caption = \"n = 10\") +\n  theme_classic(base_size = 36)\n  #coord_cartesian(ylim = c(0,4), xlim = c(-3, 3)) \n\n```\n\n::: \n\n::: {.column width=\"50%\"}\n\n##### Specify and fit with `infer`\n\n```{r}\n#| echo: true\n\ndata_n10 %>%\n  specify(y ~ x) %>%\n  fit()\n\n```\n\n\n::: \n\n::::\n\n\n## Model reliability asks:   {.smaller}\n\nHow certain can we be about the parameter estimates we obtained?\n\n\n\n```{r}\n#| echo: true\n#| output-location: column-fragment\n\nobserved_fit <- data_n10 %>%\n  specify(y ~ x) %>%\n  fit()\n\nobserved_fit\n\n```\n\n. . . \n\nBut... why is there uncertainty around the parameter estimates at all?\n\n\n\n\n## Because of sampling error {.smaller}\n\nWe are interested in the model parameters that best describe the *population from which the sample was drawn* (not a given sample)\n\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n```{r}\n#| echo: false\n\n\n\nggplot(\n  data = data_n10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE, linewidth =2) +\n  labs(title = \"Fit the model to our sample\") \n  #coord_cartesian(ylim = c(0,4), xlim = c(-3, 3)) \n\n```\n\n\n::: \n\n::: {.column width=\"50%\"}\n\n\n\n```{r}\n#| echo: false\n\n# generate some data \nset.seed(44)\nw0 = 2\nw1 = 0.5\n\ndata_another10 <- tibble(\n  x = rnorm(10, sd = 1), \n  y = w0 + (w1*x) + rnorm(10, sd = 1)\n)\n\nggplot(\n  data = data_another10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", alpha = 0.5, size = 3) +\n  geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE, linewidth =2, alpha = 0.5) +\n  labs(title = \"Fit the same model to a different sample\")\n\n\n```\n\n\n::: \n\n::::\n\n- Due to *sampling error*, we can expect some variability in the model parameters that describe a sample of data. \n\n## Model reliability  {.smaller}\n\n- We can think of model reliability as the *stability* of the parameters of a fitted model. \n- The more data we collect, the more reliable the model parameters will be. \n\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n```{r}\n#| echo: false\n\n\n\nggplot(\n  data = data_n10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n geom_smooth(method = \"lm\", formula = \"y ~ x\", level = 0.95, linewidth =2) +\n  labs(title = \"Fit the model to 10 data points\") \n  #coord_cartesian(ylim = c(0,4), xlim = c(-3, 3)) \n\n```\n\n\n::: \n\n::: {.column width=\"50%\"}\n\n\n\n```{r}\n#| echo: false\n\nggplot(\n  data = data_n200,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", alpha = 0.5, size = 3) +\n  geom_smooth(method = \"lm\", formula = \"y ~ x\", level = 0.95, linewidth =2, alpha = 0.5) +\n  labs(title = \"Fit the model to 200 data points\")\n\n\n```\n\n\n::: \n\n::::\n\n## {.smaller}\n### Confidence intervals via bootstrapping \n\nWe can obtain confidence intervals around parameter estimates for models in the same we we did for point estimates like the mean: **bootstrapping**\n\n1. Draw bootstrap samples from the observed data\n2. Fit the model of interest to each bootstrapped sample \n3. Construct the sampling distribution of parameter estimates across bootstraps\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n```{r}\n#| echo: false\n\nbootstrapped_fits <- data_n10 %>%\n  specify(y ~ x) %>%\n  generate(reps = 1000, type = \"bootstrap\") %>%\n  fit()\n\nbootstrapped_fits_wide <- bootstrapped_fits %>%\n  spread(term, estimate)\n\nggplot(\n  data = data_n10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n  geom_abline(data = bootstrapped_fits_wide,\n     aes(slope =  x, intercept = intercept, group = replicate), alpha = 0.05)  +\n  #geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE, linewidth = 2) +\n  labs(caption = \"n = 10\", title = \"Bootstrapped model fits\")\n\n```\n\n\n::: \n\n::: {.column width=\"50%\"}\n\n\n\n```{r}\n#| echo: false\n\nci <- bootstrapped_fits %>%\n  get_confidence_interval(\n    point_estimate = observed_fit, level = 0.95\n  )\n\n  bootstrapped_fits %>%\n  visualize() +\n  shade_ci(endpoints = ci)\n\n\n```\n\n\n::: \n\n::::\n\n\n\n## {.smaller}\n### The more data we collect, the more reliable\n \n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n```{r}\n#| echo: false\n\nbootstrapped_fits_10 <- data_n10 %>%\n  specify(y ~ x) %>%\n  generate(reps = 1000, type = \"bootstrap\") %>%\n  fit()\n\nbootstrapped_fits_wide_10 <- bootstrapped_fits_10 %>%\n  spread(term, estimate)\n\nggplot(\n  data = data_n10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n  geom_abline(data = bootstrapped_fits_wide_10,\n     aes(slope =  x, intercept = intercept, group = replicate), alpha = 0.05)  +\n  #geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE, linewidth = 2) +\n  labs(title = \"Bootstrapped model fits (n=10)\")\n\n```\n\n\n::: \n\n::: {.column width=\"50%\"}\n\n\n\n```{r}\n#| echo: false\n\nci <- bootstrapped_fits_10 %>%\n  get_confidence_interval(\n    point_estimate = observed_fit, level = 0.95\n  )\n\n  bootstrapped_fits_10 %>%\n  visualize() +\n  shade_ci(endpoints = ci)\n\n\n```\n\n\n::: \n\n::::\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n```{r}\n#| echo: false\n\nbootstrapped_fits_200 <- data_n200 %>%\n  specify(y ~ x) %>%\n  generate(reps = 1000, type = \"bootstrap\") %>%\n  fit()\n\nbootstrapped_fits_wide_200 <- bootstrapped_fits_200 %>%\n  spread(term, estimate)\n\nggplot(\n  data = data_n200,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n  geom_abline(data = bootstrapped_fits_wide_200,\n     aes(slope =  x, intercept = intercept, group = replicate), alpha = 0.05)  +\n  #geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE, linewidth = 2) +\n  labs(title = \"Bootstrapped model fits (n=200)\")\n\n```\n\n\n::: \n\n::: {.column width=\"50%\"}\n\n\n\n```{r}\n#| echo: false\n\nobserved_fit_200 <- data_n200 %>%\n  specify(y ~ x) %>%\n  fit()\n\nci <- bootstrapped_fits_200 %>%\n  get_confidence_interval(\n    point_estimate = observed_fit_200, level = 0.95\n  )\n\n  bootstrapped_fits_200 %>%\n  visualize() +\n  shade_ci(endpoints = ci) \n\n\n```\n\n\n::: \n\n::::\n\n## {.smaller}\n### The more data we collect, the more reliable\n\n```{r}\n#| echo: false\n#| layout-ncol: 2\n\nbootstrapped_fits_10 %>%\n  ggplot(\n  mapping = aes(x  = term, y = estimate)\n) +\n  geom_point(alpha = 0.1, size = 2) + \n  geom_point(data = observed_fit, mapping = aes(x = term, y = estimate), color = \"blue\", size = 8) +\n  labs(title = \"Fit to 10 data points\", x = \"parameter\" ) +\n  coord_cartesian(ylim = c(-0.5, 3.5))\n\nbootstrapped_fits_200 %>%\n  ggplot(\n  mapping = aes(x  = term, y = estimate)\n) +\n  geom_point(alpha = 0.1, size = 2) + \n  geom_point(data = observed_fit_200, mapping = aes(x = term, y = estimate), color = \"blue\", size = 8) +\n  labs(title = \"Fit to 200 data points\", x = \"parameter\" ) +\n    coord_cartesian(ylim = c(-0.5, 3.5))\n\n\n```\n\n## {.smaller}\n### Confidence intervals with `infer`\n\n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\nFit bootstraps\n\n```{r}\n#| echo: true\nboot_fits <- data_n200 %>%\n  specify(y ~ x) %>%\n  generate(\n    reps = 1000, \n    type = \"bootstrap\"\n  ) %>%\n  fit()\n\nhead(boot_fits)\n\n```\n\n:::\n\n::: {.column width=\"33%\"}\n\nGet confidence interval\n\n```{r}\n#| echo: true\nci <- boot_fits %>%\n  get_confidence_interval(\n    point_estimate = observed_fit, \n    level = 0.95\n  )\n\nci \n\n```\n\n\n::: \n\n::: {.column width=\"33%\"}\n\nVisualize distribution & ci \n\n```{r}\n#| echo: true\nbootstrapped_fits %>%\n  visualize() +\n  shade_ci(endpoints = ci) \n\n\n```\n\n::: \n::::  \n\n## \n\n![](/include/figures/acc-reliable.png)\n\n<!-- ## \n\n\n```{r}\n#| echo: false\n\n# generate some data \nset.seed(44)\nw0 = 2\nw1 = 0.5\n\ndata_another10 <- tibble(\n  x = rnorm(10, sd = 1), \n  y = w0 + (w1*x) + rnorm(10, sd = 1)\n)\n\nggplot(\n  data = data_another10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n  geom_abline(\n     aes(slope =  0.5, intercept = 2), linewidth = 2)  +\n  geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE, linewidth =1) +\n  labs(title = \"Fit the model to another sample\")\n\n\n```\n\n\n```{r}\n#| echo: false\n\ntwenty_fits <- data_n10 %>%\n  specify(y ~ x) %>%\n  generate(reps = 20, type = \"bootstrap\") %>%\n  fit()\n\ntwenty_fits_wide <- twenty_fits %>%\n  spread(term, estimate)\n\nggplot(\n  data = data_n10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3, alpha = 0.25) +\n  geom_abline(data = twenty_fits_wide,\n     aes(slope =  x, intercept = intercept, group = replicate), alpha = 0.25, linewidth = 1)  +\n  geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE, linewidth = 1) +\n  labs(title = \"Sampling \")\n\n\n```\n\n\n```{r}\n#| echo: false \n\nggplot(\n  data = data_n10,\n  mapping = aes(x = x, y = y)\n) +\n  geom_point(color = \"red\", size = 3) +\n geom_smooth(method = \"lm\", formula = \"y ~ x\", se = FALSE) +\n  labs(caption = \"n = 10\")\n  #coord_cartesian(ylim = c(0,4), xlim = c(-3, 3)) \n\n```\n -->\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","incremental":true,"output-file":"model-reliability.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.3.353","auto-stretch":true,"callout-appearance":"simple","title":"Model Reliability","subtitle":"Data Science for Studying Language and the Mind","author":"Katie Schuler","date":"11-07-2023","theme":"white","slideNumber":true,"footer":"[https://kathrynschuler.com/datasci](https://kathrynschuler.com/datasci/)"}}},"projectFormats":["html"]}