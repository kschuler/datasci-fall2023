{"title":"Sampling Distributions","markdown":{"yaml":{"title":"Sampling Distributions","subtitle":"Data Science for Studying Language and the Mind","author":"Katie Schuler","date":"09-21-2023","echo":true,"format":{"revealjs":{"theme":"dark","slide-number":true,"incremental":true,"footer":"[https://kathrynschuler.com/datasci](https://kathrynschuler.com/datasci/)"}}},"headingText":"You are `here`","headingAttr":{"id":"","classes":["smaller"],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n```{r}\n#| echo: false\n#| message: false\n\nlibrary(tidyverse)\nlibrary(tidymodels)\n\ntheme_set(theme_classic(base_size = 20))\n\n```\n\n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\n##### Data science with R \n::: {.nonincremental}\n- Hello, world!\n- R basics\n- Data importing\n- Data visualization\n- Data wrangling \n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### Stats & Model buidling\n::: {.nonincremental}\n- `Probability distributions`\n- `Sampling variability`\n- Hypothesis testing\n- Model specification\n- Model fitting \n- Model accuracy\n- Model reliability\n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### More advanced \n::: {.nonincremental}\n\n- Classification\n- Feature engineering (preprocessing) \n- Inference for regression\n- Mixed-effect models\n::: \n:::\n\n::::\n\n## Attribution\n\n- Inspired by a MATLAB course Katie took by Kendrick Kay \n- Data simulated from Ritchie et al 2018:\n\n. . . \n\n> Sex Differences in the Adult Human Brain: Evidence from 5216 UK Biobank Participants\n\n# Explore a simple dataset \n\n## Dataset {.smaller}\n\nSuppose we measure a single quantity: `brain volume of human adults` \n\n```{r}\n#| echo: false \n\ndata <- read_csv(\"http://kathrynschuler.com/datasets/brain_volume.csv\") %>% select(volume)\nglimpse(data)\n\nggplot(data, aes(x = volume)) +\n    geom_rug() +\n    labs(x = \"brain volume\")\n\n```\n\n\n\n## Visualize the distribution {.smaller}\n\nVisualize the distribution of the data with a `histogram`\n\n```{r}\n#| echo: false \n\nggplot(data, aes(x = volume)) +\n    geom_rug() +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 16, alpha = 0.5) +\n    labs(x = \"brain volume\")\n\n```\n\n\n\n\n## Measure of central tendency {.smaller}\n\nSummarize the data with a single value: `mean`, a measure of where a central or typical value might fall\n\n```{r}\n#| output-location: column\n\nsum_stats <- data %>% summarise(\n    n = n(), \n    mean = mean(volume))\nsum_stats\n```\n\n. . . \n\n```{r}\n#| echo: false \n\nggplot(data, aes(x = volume)) +\n    geom_rug() +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 16, alpha = 0.5) +\n  geom_vline(xintercept = sum_stats$mean, y = 1100, size = 2) +\n  coord_cartesian(ylim = c(0, 1200)) +\n    labs(x = \"brain volume\")\n\n```\n\n\n\n## Measure of variability {.smaller}\n\nSummarize the spread of the data with `standard deviation`\n\n```{r}\n#| output-location: column\n\nsum_stats <- data %>% summarise(\n    n = n(), \n    mean = mean(volume),\n    sd = sd(volume))\nsum_stats\n```\n\n. . . \n\n```{r}\n#| echo: false \n\n\nggplot(data, aes(x = volume)) +\n    geom_rug() +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 16, alpha = 0.5) +\n    geom_vline(xintercept = sum_stats$mean, y = 1100, size = 2) +\n\n  geom_vline(xintercept = sum_stats$mean-sum_stats$sd, linetype = \"dashed\", size = 2) +\n  geom_vline(xintercept = sum_stats$mean+sum_stats$sd, linetype = \"dashed\", size = 2) +\n  coord_cartesian(ylim = c(0, 1200)) +\n    labs(x = \"brain volume\")\n\n```\n\n\n## Parametric statistics\n\nMean and sd are `parametric` summary statistics. They are given by the following equations:\n\n:::: {.columns}\n::: {.column width=50%}\n$mean(x) = \\bar{x} = \\frac{\\sum_{i=i}^{n} x_{i}}{n}$\n:::\n::: {.column width=50%}\nsd($x$) = $\\sqrt{\\frac{\\sum_{i=1}^n (x_i - \\bar{x})^2}{n-1}}$\n:::\n::::\n\n```{r}\n#| echo: false \n\nggplot(data, aes(x = volume)) +\n    geom_rug() +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 16, alpha = 0.5) +\n    geom_vline(xintercept = sum_stats$mean, y = 1100, size = 2) +\n\n  geom_vline(xintercept = sum_stats$mean-sum_stats$sd, linetype = \"dashed\", size = 2) +\n  geom_vline(xintercept = sum_stats$mean+sum_stats$sd, linetype = \"dashed\", size = 2) +\n  coord_cartesian(ylim = c(0, 1200)) +\n    labs(x = \"brain volume\")\n\n```\n\n- Mean and sd are a good summary of the data when the distribution is `normal` (**gaussian**)\n\n## Nonparametric statistics\n\nBut suppose our distribution is not normal.\n\n```{r}\n#| echo: false\nnot_normal <- tibble(\n    y = c(rep(5, times = 55 ), rep(15, times = 25 ), rep(25, times = 15), rep(32, 5), 42, 55, 62:65, 72:75, 83 \n))\n\nsum_stats_not <- not_normal %>%\n    summarise(n = n(), mean = mean(y), sd = sd(y))\n\nggplot(not_normal, aes(x = y)) +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 9, alpha = 0.5) +\n  coord_cartesian(ylim = c(0, 60)) +\n    labs(x = \"y\")\n\n```\n\n\n## Nonparametric statistics\n\nmean and sd are not a good summary anymore.\n\n```{r}\n#| echo: false\n\nggplot(not_normal, aes(x = y)) +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 9, alpha = 0.5) +\n    geom_vline(xintercept = sum_stats_not$mean, y = 1100, size = 2) +\n\n  geom_vline(xintercept = sum_stats_not$mean-sum_stats_not$sd, linetype = \"dashed\", size = 2) +\n  geom_vline(xintercept = sum_stats_not$mean+sum_stats_not$sd, linetype = \"dashed\", size = 2) +\n  coord_cartesian(ylim = c(0, 60)) +\n    labs(x = \"y\")\n\n```\n\n## Median {.smaller}\n\nInstead we can use the median as our measure of central tendency.\n\n```{r}\n#| output-location: column\n\nnp_sum_stats <- not_normal %>% summarise(\n    n = n(), \n    median = median(y))\nnp_sum_stats\n```\n\n. . . \n\n```{r}\n#| echo: false \n\nggplot(not_normal, aes(x = y)) +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 9, alpha = 0.5) +\n    geom_vline(xintercept = np_sum_stats$median, y = 1100, size = 2) +\n\n#   geom_vline(xintercept = np_sum_stats$lower, linetype = \"dashed\", size = 2) +\n#   geom_vline(xintercept = np_sum_stats$upper, linetype = \"dashed\", size = 2) +\n  coord_cartesian(ylim = c(0, 60)) +\n    labs(x = \"brain volume\")\n\n```\n\n\n## IQR {.smaller}\n\nAnd the interquartile range (`IQR`) as a measure of the spread in our data.\n\n```{r}\n#| output-location: column\n\nnp_sum_stats <- not_normal %>% summarise(\n    n = n(), \n    median = median(y),\n    lower = quantile(y, 0.25),\n    upper = quantile(y, 0.75) )\nnp_sum_stats\n```\n\n. . . \n\n```{r}\n#| echo: false \n\nggplot(not_normal, aes(x = y)) +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 9, alpha = 0.5) +\n    geom_vline(xintercept = np_sum_stats$median, y = 1100, size = 2) +\n\n  geom_vline(xintercept = np_sum_stats$lower, linetype = \"dashed\", size = 2) +\n  geom_vline(xintercept = np_sum_stats$upper, linetype = \"dashed\", size = 2) +\n  coord_cartesian(ylim = c(0, 60)) +\n    labs(x = \"brain volume\")\n\n```\n\n# Probability distributions  {.smaller}\n\nA mathematical function that describes the probability of observing different possible values of a variable\n\n## Uniform probability distribution  {.smaller}\n\n```{r}\n#| echo: false\n\nuniform_sample <- tibble(\n  y = rep(1:10, each=100)\n)\n\n# plot uniform with histogram \nggplot(uniform_sample, aes(x = y)) +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 10, alpha = 0.5) \n```\n\n## Uniform probability distirubtion {.smaller}\n\nAll possible values are equally likely\n\n:::: {.columns}\n::: {.column width=50%}\n```{r}\n#| echo: false\n\nuniform_sample <- tibble(\n  y = rep(1:10, each=100)\n)\n\n# plot uniform with histogram \nggplot(uniform_sample, aes(x = y)) +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 10, alpha = 0.5) \n```\n\n:::\n\n::: {.column width=50%}\n\n\n```{r}\nuniform_sample %>% summarise(\n    min = min(y), \n    max = max(y), \n    prob = 1/(max - min))\n```\n\n\n\nheight of prob density func\n```{r}\ndunif(4, min = 1, max = 10)\n```\n\n\nprob less than given value\n```{r}\npunif(4, min = 1, max = 10)\n```\n\n:::\n::::\n\n$p(x) = \\frac{1}{max-min}$\n\n\n\n## Gaussian (normal) probability distribution {.smaller}\n\n```{r}\n#| echo: false\n\nnormal_sample <- tibble(\n  y = rnorm(1000, mean = 0, sd = 1)\n)\n\n# plot uniform with histogram \nggplot(normal_sample, aes(x = y)) +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 12, alpha = 0.5) \n```\n\n\n## Gaussian (normal) probability distribution {.smaller}\n\n:::: {.columns}\n::: {.column width=50%}\n```{r}\n#| echo: false\n\n# plot uniform with density\nggplot(normal_sample, aes(x = y)) +\n  geom_histogram(aes(y = after_stat(density)), color = \"black\", fill = \"gray\", bins = 9, alpha = 0.5)  +\n  geom_density()\n\n```\n\n:::\n\n::: {.column width=50%}\n\n\nheight of prob density func\n```{r}\n#dunif(4, min = 1, max = 10)\ndnorm(4, mean=0, sd=1)\n```\n\n\nprob less than given value\n```{r}\n#punif(4, min = 1, max = 10)\npnorm(4, mean=0, sd=1)\n```\n\n:::\n::::\n\n$p(x) = \\frac{1}{\\sigma\\sqrt{2\\pi}}\\exp\\left(-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^{2}\\right)$\n\n# Sampling variability\n\n## The population {.smaller}\n\nWe actually want to know something about the `population`: the mean brain volume of Penn undergrads (the **parameter**)\n\n\n```{r}\n#| echo: false\nset.seed(45)\npopulation <- tibble(\n  volume = rnorm(11250, mean = 1219, sd = 161),\n  sex = NA)\n\n  p_stats <- population %>% summarise(n = n(), mean = mean(volume), sd = sd(volume))\n\n\npopulation %>%\n  ggplot(aes(x = volume)) +\n  geom_histogram( color = \"black\", fill = \"white\", bins = 24, alpha = 0.5) +\n        geom_vline(xintercept = p_stats$mean, color = \"gold\", linewidth = 2)  +\n  annotate(\n    geom = \"point\",\n    color = \"gold\",\n    shape = 8,\n    size = 10,\n    x = p_stats$mean,\n    y = 1600\n    ) +\n      annotate(geom = \"text\", x = p_stats$mean +200, y = 1600, label = \"← parameter\", size = 6) +\n      labs( y = \"count\", x = \"brain volume\", caption = \"n = 11,250\")\n\n\n```\n\n\n## The sample  {.smaller}\n\nBut we only have a small `sample` of the  population: maybe we can measure the brain volume of 100 students\n\n```{r}\n#| echo: false\nsample <- population %>% \n  specify(response = volume) %>% \n  rep_slice_sample(n = 100, reps = 1000) \n\ns_stats <- sample %>%\n  group_by(replicate) %>%\n  summarise(mean = mean(volume))\n\nuse <- s_stats %>% summarise(\n  min = min(mean), rep_min = which.min(mean), max = max(mean), rep_max = which.max(mean))\n\n   population %>%\n  ggplot(aes(x = volume)) +\n  geom_histogram( color = \"black\", fill = \"white\", bins = 24, alpha = 0.5) +\n  geom_rug(data = filter(sample, replicate == use$rep_min), color = \"navy\") +\n  geom_vline(xintercept = p_stats$mean, color = \"gold\", linewidth = 2)  +\n\n  annotate(\n    geom = \"point\",\n    color = \"gold\",\n    shape = 8,\n    size = 10,\n    x = p_stats$mean,\n    y = 1600\n    ) +      annotate(geom = \"text\", x = p_stats$mean +200, y = 1600, label = \"← parameter\", size = 6) +\n    labs(y = \"count\", x = \"brain volume\", caption = \"sample n = 100\")\n\n \n\n```\n\n## Sampling variability {.smaller}\n\nAny statistic we compute from a random sample we've collected (**parameter estimate**) will be subject to `sampling variability` and will differ from that statistics computed on the entire population (**parameter**)\n\n```{r}\n#| echo: false\n\n population %>%\n  ggplot(aes(x = volume)) +\n  #coord_cartesian(xlim = c(800, 1600)) +\n  geom_histogram( color = \"black\", fill = \"white\", bins = 24, alpha = 0.5) +\n  geom_rug(data = filter(sample, replicate == use$rep_min), color = \"navy\") +\n  geom_vline(xintercept = p_stats$mean, color = \"gold\", linewidth = 2)  +\n  geom_vline(xintercept = use$min, color = \"navy\", linewidth = 2)  +\n\n  annotate(\n    geom = \"point\",\n    color = \"gold\",\n    shape = 8,\n    size = 10,\n    x = p_stats$mean,\n    y = 1600\n    ) +\n         annotate(geom = \"text\", x = p_stats$mean +200, y = 1600, label = \"← parameter\", size = 6) +\n    annotate(geom = \"text\", x = use$min - 250, y = 1600, label = \"parameter estimate →\", color = \"navy\", size = 6) +\n    labs(y = \"count\", x = \"brain volume\", caption = \"sample n = 100\")\n \n\n```\n\n\n## Sampling variability {.smaller}\n\nIf we took another sample of 100 students, our parameter estimate would be different. \n\n```{r}\n#| echo: false\n\n population %>%\n  ggplot(aes(x = volume)) +\n  #coord_cartesian(xlim = c(800, 1600)) +\n  geom_histogram( color = \"black\", fill = \"white\", bins = 24, alpha = 0.5) +\n  geom_rug(data = filter(sample, replicate == use$rep_max), color = \"darkred\") +\n  geom_vline(xintercept = p_stats$mean, color = \"gold\", linewidth = 2)  +\n  geom_vline(xintercept = use$max, color = \"darkred\", linewidth = 2)  +\n\n  annotate(\n    geom = \"point\",\n    color = \"gold\",\n    shape = 8,\n    size = 10,\n    x = p_stats$mean,\n    y = 1600\n    ) +\n         annotate(geom = \"text\", x = p_stats$mean - 200, y = 1600, label = \"parameter →\", size = 6) +\n    annotate(geom = \"text\", x = use$max + 250, y = 1600, label = \"← parameter estimate\", color = \"darkred\", size = 6) +\n    labs(y = \"count\", x = \"brain volume\", caption = \"sample #2 n = 100\")\n\n```\n\n\n## Sampling distribution {.smaller}\n\nThe `sampling distribution` is the probability distribution of values our parameter estimate can take on. Constructed by taking a random sample, computing stat of interest, and repeating many times.\n\n```{r}\n#| echo: false\n\nggplot(s_stats, aes(x = mean)) +\n    geom_histogram(bins = 18, color = \"gray\") +\n     geom_vline(xintercept = use$max, color = \"darkred\", linewidth = 2)  +\n       geom_vline(xintercept = use$min, color = \"navy\", linewidth = 2)  +\n\n    labs(title = \"Sampling distribution of mean brain volume\", x = \"parameter estimate (mean)\") \n\n```\n\n\n## Quantifying sampling variability {.smaller}\n\nThe `spread` of the sampling distribution indicates how the parameter estimate will vary from different random samples. We can quantify the spread (express our uncertainty on our parameter estimate) in two ways\n\n\n```{r}\n#| echo: false\n\nggplot(s_stats, aes(x = mean)) +\n    geom_rug() +\n    geom_histogram(bins = 18, color = \"gray\")  \n```\n\n## Quantifying sampling variability with `standard error` {.smaller}\n\nOne way is to compute the standard deviation of the sampling distribution: the `standard error`\n\n```{r}\n#| echo: false\n\nse <- s_stats %>% summarise(samp_mean = mean(mean), samp_sd = sd(mean), se = samp_sd/sqrt(length(mean)))\n\ntheoretical_ci <- se %>% mutate(lower = samp_mean-samp_sd, upper = samp_mean + samp_sd) %>% select(lower, upper)\n\nggplot(s_stats, aes(x = mean)) +\n    geom_rug() +\n    geom_histogram(bins = 18, color = \"gray\")  +\n    shade_ci(theoretical_ci) +\n    labs(y = \"count\")\n\n```\n\n## Quantifying sampling variability with a `confidence interval`{.smaller}\n\nAnother way is to construct a `confidence interval`\n\n```{r}\n#| echo: false\n\nci <- s_stats %>%\n  summarise(lower = quantile(mean, 0.157), upper = quantile(mean, .843))\n\n\nggplot(s_stats, aes(x = mean)) +\n    geom_rug() +\n    geom_histogram(bins = 18, color = \"gray\")  +\n    shade_ci(ci) +\n    labs(y = \"count\")\n\n```\n\n## Practical considerations \n\n- We don't have access to the entire population\n- We can (usually) only do our experiment once\n\n\n\n\n\n\n\n# Bootstrapping\n\nTo construct the sampling distribution\n\n## Bootstrapping \n\nInstead of assuming a parametric probability distributon, we use the data themselves to approximate the underlying distribution: we `sample our sample`!\n\n\n# Bootsrapping with `infer` \n## `infer` is part of `tidymodels` \n\n> The tidymodels framework is a collection of packages for modeling and machine learning using tidyverse principles.\n\n\n```r\ninstall.packages(\"tidymodels\")`\n```\n\n```{r}\n#| echo: false\n# get a sample to work with as our \"data\"\nsample1 <- filter(sample, replicate == 1)\n\n```\n\n## Generate the sampling distribution {.smaller}\n\nGenerate the sampling distribution with `specify()`, `generate()`, and `calculate()`\n\n```{r}\n#| output-location: column\n\nbootstrap_distribution <- sample1  %>% \n  specify(response = volume) %>% \n  generate(reps = 1000, type = \"bootstrap\") %>% \n  calculate(stat = \"mean\")\n\nbootstrap_distribution\n```\n\n## Visualize the bootstrap distribution {.smaller}\n\nVisualize the bootstrap distribution you generated with `visualize()`\n\n```{r}\n#| output-location: column\nbootstrap_distribution %>% \n  visualize()\n```\n\n## Quantify the spread with `se` {.smaller}\n\nQuantify the spread of the sampling distributon with `get_confidence_interval()`, using **standard error**\n\n```{r}\n#| output-location: column\nse_bootstrap <- bootstrap_distribution %>% \n  get_confidence_interval(\n    type = \"se\",\n    point_estimate = mean(sample1$volume)\n  )\n\nse_bootstrap\n\n```\n\n. . . \n\n```{r}\n#| output-location: column\nbootstrap_distribution %>% \n  visualize() +\n  shade_confidence_interval(\n    endpoints = se_bootstrap\n  )\n```\n\n## Quantify the spread with `ci` {.smaller}\n\nQuantify the spread of the sampling distributon with `get_confidence_interval`, using a **confidence interval**\n\n```{r}\n#| output-location: column\nci_bootstrap <- bootstrap_distribution %>% \n  get_confidence_interval(\n    type  =\"percentile\", \n    level = 0.95\n  )\n\nci_bootstrap\n```\n\n. . . \n\n```{r}\n#| output-location: column\n\nbootstrap_distribution %>% \n  visualize() +\n  shade_confidence_interval(\n    endpoints = ci_bootstrap\n  )\n```","srcMarkdownNoYaml":"\n\n```{r}\n#| echo: false\n#| message: false\n\nlibrary(tidyverse)\nlibrary(tidymodels)\n\ntheme_set(theme_classic(base_size = 20))\n\n```\n\n## You are `here` {.smaller} \n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\n##### Data science with R \n::: {.nonincremental}\n- Hello, world!\n- R basics\n- Data importing\n- Data visualization\n- Data wrangling \n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### Stats & Model buidling\n::: {.nonincremental}\n- `Probability distributions`\n- `Sampling variability`\n- Hypothesis testing\n- Model specification\n- Model fitting \n- Model accuracy\n- Model reliability\n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### More advanced \n::: {.nonincremental}\n\n- Classification\n- Feature engineering (preprocessing) \n- Inference for regression\n- Mixed-effect models\n::: \n:::\n\n::::\n\n## Attribution\n\n- Inspired by a MATLAB course Katie took by Kendrick Kay \n- Data simulated from Ritchie et al 2018:\n\n. . . \n\n> Sex Differences in the Adult Human Brain: Evidence from 5216 UK Biobank Participants\n\n# Explore a simple dataset \n\n## Dataset {.smaller}\n\nSuppose we measure a single quantity: `brain volume of human adults` \n\n```{r}\n#| echo: false \n\ndata <- read_csv(\"http://kathrynschuler.com/datasets/brain_volume.csv\") %>% select(volume)\nglimpse(data)\n\nggplot(data, aes(x = volume)) +\n    geom_rug() +\n    labs(x = \"brain volume\")\n\n```\n\n\n\n## Visualize the distribution {.smaller}\n\nVisualize the distribution of the data with a `histogram`\n\n```{r}\n#| echo: false \n\nggplot(data, aes(x = volume)) +\n    geom_rug() +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 16, alpha = 0.5) +\n    labs(x = \"brain volume\")\n\n```\n\n\n\n\n## Measure of central tendency {.smaller}\n\nSummarize the data with a single value: `mean`, a measure of where a central or typical value might fall\n\n```{r}\n#| output-location: column\n\nsum_stats <- data %>% summarise(\n    n = n(), \n    mean = mean(volume))\nsum_stats\n```\n\n. . . \n\n```{r}\n#| echo: false \n\nggplot(data, aes(x = volume)) +\n    geom_rug() +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 16, alpha = 0.5) +\n  geom_vline(xintercept = sum_stats$mean, y = 1100, size = 2) +\n  coord_cartesian(ylim = c(0, 1200)) +\n    labs(x = \"brain volume\")\n\n```\n\n\n\n## Measure of variability {.smaller}\n\nSummarize the spread of the data with `standard deviation`\n\n```{r}\n#| output-location: column\n\nsum_stats <- data %>% summarise(\n    n = n(), \n    mean = mean(volume),\n    sd = sd(volume))\nsum_stats\n```\n\n. . . \n\n```{r}\n#| echo: false \n\n\nggplot(data, aes(x = volume)) +\n    geom_rug() +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 16, alpha = 0.5) +\n    geom_vline(xintercept = sum_stats$mean, y = 1100, size = 2) +\n\n  geom_vline(xintercept = sum_stats$mean-sum_stats$sd, linetype = \"dashed\", size = 2) +\n  geom_vline(xintercept = sum_stats$mean+sum_stats$sd, linetype = \"dashed\", size = 2) +\n  coord_cartesian(ylim = c(0, 1200)) +\n    labs(x = \"brain volume\")\n\n```\n\n\n## Parametric statistics\n\nMean and sd are `parametric` summary statistics. They are given by the following equations:\n\n:::: {.columns}\n::: {.column width=50%}\n$mean(x) = \\bar{x} = \\frac{\\sum_{i=i}^{n} x_{i}}{n}$\n:::\n::: {.column width=50%}\nsd($x$) = $\\sqrt{\\frac{\\sum_{i=1}^n (x_i - \\bar{x})^2}{n-1}}$\n:::\n::::\n\n```{r}\n#| echo: false \n\nggplot(data, aes(x = volume)) +\n    geom_rug() +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 16, alpha = 0.5) +\n    geom_vline(xintercept = sum_stats$mean, y = 1100, size = 2) +\n\n  geom_vline(xintercept = sum_stats$mean-sum_stats$sd, linetype = \"dashed\", size = 2) +\n  geom_vline(xintercept = sum_stats$mean+sum_stats$sd, linetype = \"dashed\", size = 2) +\n  coord_cartesian(ylim = c(0, 1200)) +\n    labs(x = \"brain volume\")\n\n```\n\n- Mean and sd are a good summary of the data when the distribution is `normal` (**gaussian**)\n\n## Nonparametric statistics\n\nBut suppose our distribution is not normal.\n\n```{r}\n#| echo: false\nnot_normal <- tibble(\n    y = c(rep(5, times = 55 ), rep(15, times = 25 ), rep(25, times = 15), rep(32, 5), 42, 55, 62:65, 72:75, 83 \n))\n\nsum_stats_not <- not_normal %>%\n    summarise(n = n(), mean = mean(y), sd = sd(y))\n\nggplot(not_normal, aes(x = y)) +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 9, alpha = 0.5) +\n  coord_cartesian(ylim = c(0, 60)) +\n    labs(x = \"y\")\n\n```\n\n\n## Nonparametric statistics\n\nmean and sd are not a good summary anymore.\n\n```{r}\n#| echo: false\n\nggplot(not_normal, aes(x = y)) +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 9, alpha = 0.5) +\n    geom_vline(xintercept = sum_stats_not$mean, y = 1100, size = 2) +\n\n  geom_vline(xintercept = sum_stats_not$mean-sum_stats_not$sd, linetype = \"dashed\", size = 2) +\n  geom_vline(xintercept = sum_stats_not$mean+sum_stats_not$sd, linetype = \"dashed\", size = 2) +\n  coord_cartesian(ylim = c(0, 60)) +\n    labs(x = \"y\")\n\n```\n\n## Median {.smaller}\n\nInstead we can use the median as our measure of central tendency.\n\n```{r}\n#| output-location: column\n\nnp_sum_stats <- not_normal %>% summarise(\n    n = n(), \n    median = median(y))\nnp_sum_stats\n```\n\n. . . \n\n```{r}\n#| echo: false \n\nggplot(not_normal, aes(x = y)) +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 9, alpha = 0.5) +\n    geom_vline(xintercept = np_sum_stats$median, y = 1100, size = 2) +\n\n#   geom_vline(xintercept = np_sum_stats$lower, linetype = \"dashed\", size = 2) +\n#   geom_vline(xintercept = np_sum_stats$upper, linetype = \"dashed\", size = 2) +\n  coord_cartesian(ylim = c(0, 60)) +\n    labs(x = \"brain volume\")\n\n```\n\n\n## IQR {.smaller}\n\nAnd the interquartile range (`IQR`) as a measure of the spread in our data.\n\n```{r}\n#| output-location: column\n\nnp_sum_stats <- not_normal %>% summarise(\n    n = n(), \n    median = median(y),\n    lower = quantile(y, 0.25),\n    upper = quantile(y, 0.75) )\nnp_sum_stats\n```\n\n. . . \n\n```{r}\n#| echo: false \n\nggplot(not_normal, aes(x = y)) +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 9, alpha = 0.5) +\n    geom_vline(xintercept = np_sum_stats$median, y = 1100, size = 2) +\n\n  geom_vline(xintercept = np_sum_stats$lower, linetype = \"dashed\", size = 2) +\n  geom_vline(xintercept = np_sum_stats$upper, linetype = \"dashed\", size = 2) +\n  coord_cartesian(ylim = c(0, 60)) +\n    labs(x = \"brain volume\")\n\n```\n\n# Probability distributions  {.smaller}\n\nA mathematical function that describes the probability of observing different possible values of a variable\n\n## Uniform probability distribution  {.smaller}\n\n```{r}\n#| echo: false\n\nuniform_sample <- tibble(\n  y = rep(1:10, each=100)\n)\n\n# plot uniform with histogram \nggplot(uniform_sample, aes(x = y)) +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 10, alpha = 0.5) \n```\n\n## Uniform probability distirubtion {.smaller}\n\nAll possible values are equally likely\n\n:::: {.columns}\n::: {.column width=50%}\n```{r}\n#| echo: false\n\nuniform_sample <- tibble(\n  y = rep(1:10, each=100)\n)\n\n# plot uniform with histogram \nggplot(uniform_sample, aes(x = y)) +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 10, alpha = 0.5) \n```\n\n:::\n\n::: {.column width=50%}\n\n\n```{r}\nuniform_sample %>% summarise(\n    min = min(y), \n    max = max(y), \n    prob = 1/(max - min))\n```\n\n\n\nheight of prob density func\n```{r}\ndunif(4, min = 1, max = 10)\n```\n\n\nprob less than given value\n```{r}\npunif(4, min = 1, max = 10)\n```\n\n:::\n::::\n\n$p(x) = \\frac{1}{max-min}$\n\n\n\n## Gaussian (normal) probability distribution {.smaller}\n\n```{r}\n#| echo: false\n\nnormal_sample <- tibble(\n  y = rnorm(1000, mean = 0, sd = 1)\n)\n\n# plot uniform with histogram \nggplot(normal_sample, aes(x = y)) +\n  geom_histogram(color = \"black\", fill = \"gray\", bins = 12, alpha = 0.5) \n```\n\n\n## Gaussian (normal) probability distribution {.smaller}\n\n:::: {.columns}\n::: {.column width=50%}\n```{r}\n#| echo: false\n\n# plot uniform with density\nggplot(normal_sample, aes(x = y)) +\n  geom_histogram(aes(y = after_stat(density)), color = \"black\", fill = \"gray\", bins = 9, alpha = 0.5)  +\n  geom_density()\n\n```\n\n:::\n\n::: {.column width=50%}\n\n\nheight of prob density func\n```{r}\n#dunif(4, min = 1, max = 10)\ndnorm(4, mean=0, sd=1)\n```\n\n\nprob less than given value\n```{r}\n#punif(4, min = 1, max = 10)\npnorm(4, mean=0, sd=1)\n```\n\n:::\n::::\n\n$p(x) = \\frac{1}{\\sigma\\sqrt{2\\pi}}\\exp\\left(-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^{2}\\right)$\n\n# Sampling variability\n\n## The population {.smaller}\n\nWe actually want to know something about the `population`: the mean brain volume of Penn undergrads (the **parameter**)\n\n\n```{r}\n#| echo: false\nset.seed(45)\npopulation <- tibble(\n  volume = rnorm(11250, mean = 1219, sd = 161),\n  sex = NA)\n\n  p_stats <- population %>% summarise(n = n(), mean = mean(volume), sd = sd(volume))\n\n\npopulation %>%\n  ggplot(aes(x = volume)) +\n  geom_histogram( color = \"black\", fill = \"white\", bins = 24, alpha = 0.5) +\n        geom_vline(xintercept = p_stats$mean, color = \"gold\", linewidth = 2)  +\n  annotate(\n    geom = \"point\",\n    color = \"gold\",\n    shape = 8,\n    size = 10,\n    x = p_stats$mean,\n    y = 1600\n    ) +\n      annotate(geom = \"text\", x = p_stats$mean +200, y = 1600, label = \"← parameter\", size = 6) +\n      labs( y = \"count\", x = \"brain volume\", caption = \"n = 11,250\")\n\n\n```\n\n\n## The sample  {.smaller}\n\nBut we only have a small `sample` of the  population: maybe we can measure the brain volume of 100 students\n\n```{r}\n#| echo: false\nsample <- population %>% \n  specify(response = volume) %>% \n  rep_slice_sample(n = 100, reps = 1000) \n\ns_stats <- sample %>%\n  group_by(replicate) %>%\n  summarise(mean = mean(volume))\n\nuse <- s_stats %>% summarise(\n  min = min(mean), rep_min = which.min(mean), max = max(mean), rep_max = which.max(mean))\n\n   population %>%\n  ggplot(aes(x = volume)) +\n  geom_histogram( color = \"black\", fill = \"white\", bins = 24, alpha = 0.5) +\n  geom_rug(data = filter(sample, replicate == use$rep_min), color = \"navy\") +\n  geom_vline(xintercept = p_stats$mean, color = \"gold\", linewidth = 2)  +\n\n  annotate(\n    geom = \"point\",\n    color = \"gold\",\n    shape = 8,\n    size = 10,\n    x = p_stats$mean,\n    y = 1600\n    ) +      annotate(geom = \"text\", x = p_stats$mean +200, y = 1600, label = \"← parameter\", size = 6) +\n    labs(y = \"count\", x = \"brain volume\", caption = \"sample n = 100\")\n\n \n\n```\n\n## Sampling variability {.smaller}\n\nAny statistic we compute from a random sample we've collected (**parameter estimate**) will be subject to `sampling variability` and will differ from that statistics computed on the entire population (**parameter**)\n\n```{r}\n#| echo: false\n\n population %>%\n  ggplot(aes(x = volume)) +\n  #coord_cartesian(xlim = c(800, 1600)) +\n  geom_histogram( color = \"black\", fill = \"white\", bins = 24, alpha = 0.5) +\n  geom_rug(data = filter(sample, replicate == use$rep_min), color = \"navy\") +\n  geom_vline(xintercept = p_stats$mean, color = \"gold\", linewidth = 2)  +\n  geom_vline(xintercept = use$min, color = \"navy\", linewidth = 2)  +\n\n  annotate(\n    geom = \"point\",\n    color = \"gold\",\n    shape = 8,\n    size = 10,\n    x = p_stats$mean,\n    y = 1600\n    ) +\n         annotate(geom = \"text\", x = p_stats$mean +200, y = 1600, label = \"← parameter\", size = 6) +\n    annotate(geom = \"text\", x = use$min - 250, y = 1600, label = \"parameter estimate →\", color = \"navy\", size = 6) +\n    labs(y = \"count\", x = \"brain volume\", caption = \"sample n = 100\")\n \n\n```\n\n\n## Sampling variability {.smaller}\n\nIf we took another sample of 100 students, our parameter estimate would be different. \n\n```{r}\n#| echo: false\n\n population %>%\n  ggplot(aes(x = volume)) +\n  #coord_cartesian(xlim = c(800, 1600)) +\n  geom_histogram( color = \"black\", fill = \"white\", bins = 24, alpha = 0.5) +\n  geom_rug(data = filter(sample, replicate == use$rep_max), color = \"darkred\") +\n  geom_vline(xintercept = p_stats$mean, color = \"gold\", linewidth = 2)  +\n  geom_vline(xintercept = use$max, color = \"darkred\", linewidth = 2)  +\n\n  annotate(\n    geom = \"point\",\n    color = \"gold\",\n    shape = 8,\n    size = 10,\n    x = p_stats$mean,\n    y = 1600\n    ) +\n         annotate(geom = \"text\", x = p_stats$mean - 200, y = 1600, label = \"parameter →\", size = 6) +\n    annotate(geom = \"text\", x = use$max + 250, y = 1600, label = \"← parameter estimate\", color = \"darkred\", size = 6) +\n    labs(y = \"count\", x = \"brain volume\", caption = \"sample #2 n = 100\")\n\n```\n\n\n## Sampling distribution {.smaller}\n\nThe `sampling distribution` is the probability distribution of values our parameter estimate can take on. Constructed by taking a random sample, computing stat of interest, and repeating many times.\n\n```{r}\n#| echo: false\n\nggplot(s_stats, aes(x = mean)) +\n    geom_histogram(bins = 18, color = \"gray\") +\n     geom_vline(xintercept = use$max, color = \"darkred\", linewidth = 2)  +\n       geom_vline(xintercept = use$min, color = \"navy\", linewidth = 2)  +\n\n    labs(title = \"Sampling distribution of mean brain volume\", x = \"parameter estimate (mean)\") \n\n```\n\n\n## Quantifying sampling variability {.smaller}\n\nThe `spread` of the sampling distribution indicates how the parameter estimate will vary from different random samples. We can quantify the spread (express our uncertainty on our parameter estimate) in two ways\n\n\n```{r}\n#| echo: false\n\nggplot(s_stats, aes(x = mean)) +\n    geom_rug() +\n    geom_histogram(bins = 18, color = \"gray\")  \n```\n\n## Quantifying sampling variability with `standard error` {.smaller}\n\nOne way is to compute the standard deviation of the sampling distribution: the `standard error`\n\n```{r}\n#| echo: false\n\nse <- s_stats %>% summarise(samp_mean = mean(mean), samp_sd = sd(mean), se = samp_sd/sqrt(length(mean)))\n\ntheoretical_ci <- se %>% mutate(lower = samp_mean-samp_sd, upper = samp_mean + samp_sd) %>% select(lower, upper)\n\nggplot(s_stats, aes(x = mean)) +\n    geom_rug() +\n    geom_histogram(bins = 18, color = \"gray\")  +\n    shade_ci(theoretical_ci) +\n    labs(y = \"count\")\n\n```\n\n## Quantifying sampling variability with a `confidence interval`{.smaller}\n\nAnother way is to construct a `confidence interval`\n\n```{r}\n#| echo: false\n\nci <- s_stats %>%\n  summarise(lower = quantile(mean, 0.157), upper = quantile(mean, .843))\n\n\nggplot(s_stats, aes(x = mean)) +\n    geom_rug() +\n    geom_histogram(bins = 18, color = \"gray\")  +\n    shade_ci(ci) +\n    labs(y = \"count\")\n\n```\n\n## Practical considerations \n\n- We don't have access to the entire population\n- We can (usually) only do our experiment once\n\n\n\n\n\n\n\n# Bootstrapping\n\nTo construct the sampling distribution\n\n## Bootstrapping \n\nInstead of assuming a parametric probability distributon, we use the data themselves to approximate the underlying distribution: we `sample our sample`!\n\n\n# Bootsrapping with `infer` \n## `infer` is part of `tidymodels` \n\n> The tidymodels framework is a collection of packages for modeling and machine learning using tidyverse principles.\n\n\n```r\ninstall.packages(\"tidymodels\")`\n```\n\n```{r}\n#| echo: false\n# get a sample to work with as our \"data\"\nsample1 <- filter(sample, replicate == 1)\n\n```\n\n## Generate the sampling distribution {.smaller}\n\nGenerate the sampling distribution with `specify()`, `generate()`, and `calculate()`\n\n```{r}\n#| output-location: column\n\nbootstrap_distribution <- sample1  %>% \n  specify(response = volume) %>% \n  generate(reps = 1000, type = \"bootstrap\") %>% \n  calculate(stat = \"mean\")\n\nbootstrap_distribution\n```\n\n## Visualize the bootstrap distribution {.smaller}\n\nVisualize the bootstrap distribution you generated with `visualize()`\n\n```{r}\n#| output-location: column\nbootstrap_distribution %>% \n  visualize()\n```\n\n## Quantify the spread with `se` {.smaller}\n\nQuantify the spread of the sampling distributon with `get_confidence_interval()`, using **standard error**\n\n```{r}\n#| output-location: column\nse_bootstrap <- bootstrap_distribution %>% \n  get_confidence_interval(\n    type = \"se\",\n    point_estimate = mean(sample1$volume)\n  )\n\nse_bootstrap\n\n```\n\n. . . \n\n```{r}\n#| output-location: column\nbootstrap_distribution %>% \n  visualize() +\n  shade_confidence_interval(\n    endpoints = se_bootstrap\n  )\n```\n\n## Quantify the spread with `ci` {.smaller}\n\nQuantify the spread of the sampling distributon with `get_confidence_interval`, using a **confidence interval**\n\n```{r}\n#| output-location: column\nci_bootstrap <- bootstrap_distribution %>% \n  get_confidence_interval(\n    type  =\"percentile\", \n    level = 0.95\n  )\n\nci_bootstrap\n```\n\n. . . \n\n```{r}\n#| output-location: column\n\nbootstrap_distribution %>% \n  visualize() +\n  shade_confidence_interval(\n    endpoints = ci_bootstrap\n  )\n```"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","incremental":true,"output-file":"sampling-distribution.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.3.353","auto-stretch":true,"callout-appearance":"simple","title":"Sampling Distributions","subtitle":"Data Science for Studying Language and the Mind","author":"Katie Schuler","date":"09-21-2023","theme":"dark","slideNumber":true,"footer":"[https://kathrynschuler.com/datasci](https://kathrynschuler.com/datasci/)"}}},"projectFormats":["html"]}