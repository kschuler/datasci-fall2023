{"title":"R basics","markdown":{"yaml":{"title":"R basics","author":"Katie Schuler","subtitle":"Data Science for Studying Language and the Mind","date":"2023-08-31","echo":true,"format":{"revealjs":{"theme":"dark","incremental":true,"footer":"[https://kathrynschuler.com/datasci](/index.html)"}}},"headingText":"You are `here`","headingAttr":{"id":"","classes":["smaller"],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\n##### Data science with R \n::: {.nonincremental}\n- Hello, world!\n- `R basics`\n- Data importing\n- Data visualization \n- Data wrangling \n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### Stats & Model buidling\n::: {.nonincremental}\n- Probability distributions\n- Sampling variability\n- Hypothesis testing\n- Model specification\n- Model fitting \n- Model accuracy\n- Model reliability\n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### More advanced \n::: {.nonincremental}\n\n- Classification\n- Feature engineering (preprocessing) \n- Inference for regression\n- Mixed-effect models\n::: \n:::\n\n::::\n\n## Learning resources\n\n- [colab notebook (R kernel)](https://colab.research.google.com/#create=true&language=r)\n- [Lecture notes](/notes/r-basics.html) \n- [Labs](/labs/lab-01.html)\n\n## Basic concepts (review) {.smaller}\n\n- `Expressions`: fundamental building blocks of programming \n- `Objects`: allow us to store stuff, created with assignment operator\n- `Name`s: names w give objects must be letters, numbers, ., or _\n- `Attributes`: allow us to attach arbitrary metadata to objects\n- `Functions`: take some input, perform some computation, and return some output\n- `Environment`: collection of all objects we defined in current R session\n- `Packages`: collections of functions, data, and documentation bundled together in R\n- `Comments`: notes you leave for yourself, not evaluated\n- `Messages`: notes R leaves for you (FYI, warning, error)\n\n\n## Important functions \n#### Objects\n- `str(x)` - returns summary of object's structure\n- `typeof(x)` - returns object's data type\n- `length(x)` - returns object's length\n- `attributes(x)` - returns list of object's attributes\n\n## Important functions  \n#### Environment\n\n- `ls()` - list all variables in environment\n- `rm(x)` - remove x variable from environment\n- `rm(list = ls())` - remove all variables from environment\n\n## Important function \n#### Packages\n\n- `install.packages()` to install packages\n- `library()` to load package into current R session.\n- `data()` to load data from package into environment\n- `sessionInfo()` - version info, packages for current R session \n\n## Important functions  \n####  Help\n\n- `?mean` - get help with a function\n- `help('mean')` - search help files for word or phrase\n- `help(package='tidyverse')` - find help for a package \n\n# Vectors\n\n\n## Vectors\n\nare fundamental data structures in R. There are two types:\n\n- **atomic vectors** - elements of the same data type\n- **lists** - elements refer to any object \n\n\n\n\n## Atomic vectors \n\nAtomic vectors can be one of six **data types**:\n\n|`typeof(x)` | examples |\n|-|---|\n| double | 3, 3.32 |\n| integer | 1L, 144L |\n| character | \"hello\", 'hello, world!'|\n| logical | TRUE, F |\n\n. . . \n\n*atomic* because they must contain only one type\n\n## Atomic vectors \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`double` \n\n```{r}\ntypeof(3.34)\n```\n\n`integer` \n\n```{r}\ntypeof(3L)\n```\n\n\n:::\n\n::: {.column width=\"50%\"}\n`character` \n\n```{r}\ntypeof('hello, world!')\n```\n\n`logical` \n\n```{r}\ntypeof(TRUE)\n```\n\n:::\n\n::::\n\n\n\n## Create a vector\n\n\nwith `c()` for `concatenate`\n\n```{r}\n\nc(2,4,6)\nc(\"hello\", \"world\", \"!\")\nc(T, F, T)\nc(\"hello\", c(2, 3))\n```\n\n\n## Create a vector\n\nwith sequences `seq()` or repetitions `rep()`\n\n```{r}\n# sequence of integers have a special shorthand\n6:10\n```\n\n. . . \n\n```{r}\n# sequence from, to, by \nseq(from=3, to=5, by=0.5)\n```\n\n. . . \n\n```{r}\n# rep(x, times = 1, each = 1)\nrep(c(1,0), times = 4)\n```\n\n. . . \n\n```{r}\n# rep(x, times = 1, each = 1)\nrep(c(1,0), each = 4)\n```\n\n## Check data type\n\nwith `typeof(x)` - returns the type of vector x\n\n```{r}\ntypeof(3)\ntypeof(3L)\ntypeof(\"three\")\ntypeof(TRUE)\n\n```\n\n## Check data type\n\nwith `is.*(x)` - returns `TRUE` if x has type `*`\n\n```{r}\nis.double(3)\nis.integer(3L)\nis.character(\"three\")\nis.logical(TRUE)\n```\n\n## Coercion, implicit\n\nIf you try to include elements of different types, R will coerce them into the same type without warning (**implicit coercion**)\n\n```{r}\nx <- c(1, 2, \"three\", 4, 5 )\nx\ntypeof(x)\n```\n\n## Coercion, explicit\n\nYou can also use **explict coercion** to change a vector to another data type with `as.*()`\n\n```{r}\nx <- c(1, 0 , 1, 0)\nas.logical(x)\n```\n\n. . . \n\n::: aside\nhierarchy: character > double > integer > logical \n:::\n\n# More complex structures \n\n## More complex structures {.smaller}\n\nSome more complex data structures are **built from atomic vectors** by adding **attributes**:\n\n| Structure | Description | \n| -- | -------- |\n| `matrix` | vector with `dim` attribute representing 2 dimensions\n| `array` | vector with `dim` attribute representing n dimensions\n| `data.frame` | a named list of vectors (of equal length) with attributes for `names` (column names), `row.names`, and `class=\"data.frame\"` |\n\n## Create more complex structures \n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`matrix` \n\n```{r}\nmatrix(0, nrow=2, ncol=3)\n```\n\n\n\n\n`data.frame` \n\n```{r}\ndata.frame(x=c(1,2,3), y=c('a','b','c'))\n```\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n`array` \n\n```{r}\narray(0, dim=c(2,3,2))\n```\n\n\n:::\n\n::::\n\n# Operations\n\n## Basic math operators\n\n\n| Operator | Operation |\n| -- | -- |\n| `()` | Parentheses | \n| `^` | Exponent | \n| `*` | Multiply | \n| `/` | Divide | \n| `+` | Add |\n `-` | Subtract |\n\n\n## Basic math operations\n\nfollow the order of operations you expect (PEMDAS)\n\n\n```{r}\n# multiplication takes precedence\n2 + 3 * 10\n\n# we can use paratheses to be explicit\n(2 + 3) * 10 \n```\n\n\n\n\n## Comparison operators\n\n| Operator | Comparison | \n| -- | -- |\n| `x < y` | less than |\n| `x > y` | greater than | \n| `x <= y` | less than or equal to | \n| `x >= y` | greater than or equal to |\n| `x != y` | not equal to | \n| `x == y` | equal to | \n\n## Comparison operators\n\n\n```{r}\nx <- 2\ny <- 3\n```\n\n. . . \n\n<br> \n\n```{r}\nx < y\nx > y \nx != y\nx == y\n```\n\n## Logical operators \n\n| Operator | Operation | \n| -- | -- | \n| `x | y` | or |\n| `x & y` | and |\n| `!x` | not |\n| `any()` | true if any element meets condition | \n|`all()` | true if all elements meet condition | \n| `%in%` | true if any element is in following vector | \n\n## Logical operators \n\n```{r}\nx <- TRUE\ny <- FALSE\n```\n\n. . . \n\n<br> \n\n```{r}\nx | y\nx & y \n!x \nany(c(x,y))\nall(c(x,y))\n```\n\n## Operations are vectorized \n\nAlmost all operations (and many functions) are vectorized \n\n. . .\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`math` \n\n```{r}\nc(1, 2, 3) + c(4, 5, 6)\nc(1, 2, 3) / c(4, 5, 6)\nc(1, 2, 3) * 10 \nc(1, 2, 30) > 10\n```\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n`logical` \n\n```{r}\nx <- c(TRUE, FALSE, FALSE)\ny <- c(TRUE, TRUE, FALSE)\nz <- TRUE\n```\n\n```{r}\nx | y\nx & y \nx | z \nx & z \n```\n\n:::\n\n::::\n\n\n\n## Operator coercion \n\nOperators and functions will also coerce values when needed (and without warning)\n\n```{r}\n5.6 + 2L\n10 + FALSE \nlog(1)\nlog(TRUE)\n```\n\n\n\n\n# Subsetting \n\n## Subsetting\n\n> Subsetting is a natural complement to str(). While str() shows you all the pieces of any object (its structure), subsetting allows you to pull out the pieces that youâ€™re interested in. ~ Hadley Wickham, Advanced R\n\n`str()`\n\n```{r}\nx <- c(\"hello\", \"world\", \"!\")\nstr(x)\n\ny <- c(1, 2, 3, 4, 5)\nstr(y)\n```\n\n## Subsetting\n\nThere are three operators for subsetting objects: \n\n- `[` - *subsets* (one or more) elements\n- `[[` and `$` - *extracts* a single element \n\n---\n## Subset multiple elements with `[` {.smaller}\n\n| Code | Returns |\n| ---- | -------- |\n| `x[c(1,2)]` | positive integers select elements at specified indexes |\n| `x[-c(1,2)]` | negative integers select all but elements at specified indexes |\n|`x[c(\"x\", \"y\")]` | select elements by name, if elements are named |\n| `x[]` |  nothing returns the original object |\n| `x[0]` | zero returns a zero-length vector |\n| `x[c(TRUE, TRUE)]` | select elements where corresponding logical value is TRUE |\n\n## Subset multiple elements with `[` {.smaller}\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`atomic vector`\n\n```{r}\nx <- c(\"hello\", \"world\", \"1\")\n```\n\n```{r}\nx[c(1,2)]\nx[-c(1,2)]\nx[]\n\n```\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n`data.frame`\n\n```{r}\ny <- data.frame(\n        this = c(1, 2,3), \n        that = c(\"a\", \"b\", \"c\"),\n        theother = c(4, 5, 6)\n        )\n```\n\n```{r}\n\ny[c(1,2)]\ny[-c(1,2)]\ny[c(\"this\")]\n\n```\n\n\n:::\n\n:::: \n\n\n\n## 3 ways to extract a single element {.smaller}\n\n| Code | Returns |\n| ---- | -------- |\n| `[[2]]` | a single positive integer (index) |\n| `[['name']]` | a single string  |\n| `x$name` | the `$` operator is a useful shorthand for `[['name']]` |\n\n## 3 ways to extract a single element {.smaller}\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`atomic vector`\n\n```{r}\nx <- c(\"hello\", \"world\", \"1\")\n```\n\n```{r}\nx[[1]]\nx[[2]]\nx[[3]]\n\n```\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n`data.frame`\n\n```{r}\ny <- data.frame(\n        this = c(1, 2,3), \n        that = c(\"a\", \"b\", \"c\"),\n        theother = c(4, 5, 6)\n        )\n```\n\n```{r}\n\ny[[1]]\ny[[\"that\"]]\ny$that\n\n```\n\n\n:::\n\n:::: \n\n\n\n## R has many built-in functions\n\n```{r}\nx <- c(1, -2, 3)\n```\n\n. . . \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\nSome are vectorized\n\n```{r}\nlog(x)\nabs(x)\nround(x, 2)\n\n```\n\n\n:::\n\n::: {.column width=\"50%\"}\n\nSome are not\n\n```{r}\nmean(x)\nmax(x)\nmin(x)\n```\n\n\n:::\n\n:::: \n\n\n\n\n\n\n## Missing values {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`NA`\n\n- used to represent missing or unknown elements in vectors\n- Note that `NA` is contageous: expressions including `NA` usually return `NA`\n- Check for `NA` values with `is.na()`\n\n```{r}\nx <- c(1, NA, 3)\nis.na(x)\nlength(x)\nmean(x)\n```\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n`NULL` \n\n- used to represent an empty or absent vector of arbitrary type\n- `NULL` is its own special type and always has length zero and `NULL` attributes\n- Check for `NULL` values with `is.null()`\n\n```{r}\nx <- c()\nis.null(x)\nlength(x)\nmean(x)\n```\n\n\n:::\n\n::::\n\n\n\n\n\n## Programming {.smaller}\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`functions`\n\nare reusable pieces of code that take some input, perform some task or computation, and return an output\n\n\n```r\nfunction(inputs){\n    # do something\n    return(output)\n}\n```\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n`control flow` \n\nrefers to managing the order in which expressions are executed in a program\n\n- `if`...`else` - if something is true, do this; otherwise do that\n- `for` loops - repeat code a specific number of times \n- `while` loops - repeat code as long as certain conditions are true\n- `break` - exit a loop early\n- `next` - skip to next iteration in a loop \n\n:::\n\n::::\n\n# Subsetting quirks \n\nIf we have time \n\n## Notes on `[` with higher dim objects \n\n```{r}\nm <- matrix(1:6, nrow=2, ncol=3)\nm\n```\n\n```{r}\n# separate dimensions by comma \nm[1, 2]\n\n# omitted dim return all from that dim \nm[2, ]\nm[ , 2]\n\n```\n\n## Notes on `[[` and `$`: {.smaller}\n\nboth `[[` and `[` work for vectors; use `[[`\n\n```{r}\nx <- c(1, -2, 3)\nx[[1]]\nx[1]\n```\n\n`$` does partial matching without warning\n\n```{r}\ndf <- data.frame(\n        this = c(1, 2,3), \n        that = c(\"a\", \"b\", \"c\"),\n        theother = c(4, 5, 6)\n        )\n```\n\n```{r}\ndf[['theo']]\ndf$theo\n```\n\n# Questions?\n\nHave a great weekend!","srcMarkdownNoYaml":"\n\n## You are `here` {.smaller} \n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\n##### Data science with R \n::: {.nonincremental}\n- Hello, world!\n- `R basics`\n- Data importing\n- Data visualization \n- Data wrangling \n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### Stats & Model buidling\n::: {.nonincremental}\n- Probability distributions\n- Sampling variability\n- Hypothesis testing\n- Model specification\n- Model fitting \n- Model accuracy\n- Model reliability\n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### More advanced \n::: {.nonincremental}\n\n- Classification\n- Feature engineering (preprocessing) \n- Inference for regression\n- Mixed-effect models\n::: \n:::\n\n::::\n\n## Learning resources\n\n- [colab notebook (R kernel)](https://colab.research.google.com/#create=true&language=r)\n- [Lecture notes](/notes/r-basics.html) \n- [Labs](/labs/lab-01.html)\n\n## Basic concepts (review) {.smaller}\n\n- `Expressions`: fundamental building blocks of programming \n- `Objects`: allow us to store stuff, created with assignment operator\n- `Name`s: names w give objects must be letters, numbers, ., or _\n- `Attributes`: allow us to attach arbitrary metadata to objects\n- `Functions`: take some input, perform some computation, and return some output\n- `Environment`: collection of all objects we defined in current R session\n- `Packages`: collections of functions, data, and documentation bundled together in R\n- `Comments`: notes you leave for yourself, not evaluated\n- `Messages`: notes R leaves for you (FYI, warning, error)\n\n\n## Important functions \n#### Objects\n- `str(x)` - returns summary of object's structure\n- `typeof(x)` - returns object's data type\n- `length(x)` - returns object's length\n- `attributes(x)` - returns list of object's attributes\n\n## Important functions  \n#### Environment\n\n- `ls()` - list all variables in environment\n- `rm(x)` - remove x variable from environment\n- `rm(list = ls())` - remove all variables from environment\n\n## Important function \n#### Packages\n\n- `install.packages()` to install packages\n- `library()` to load package into current R session.\n- `data()` to load data from package into environment\n- `sessionInfo()` - version info, packages for current R session \n\n## Important functions  \n####  Help\n\n- `?mean` - get help with a function\n- `help('mean')` - search help files for word or phrase\n- `help(package='tidyverse')` - find help for a package \n\n# Vectors\n\n\n## Vectors\n\nare fundamental data structures in R. There are two types:\n\n- **atomic vectors** - elements of the same data type\n- **lists** - elements refer to any object \n\n\n\n\n## Atomic vectors \n\nAtomic vectors can be one of six **data types**:\n\n|`typeof(x)` | examples |\n|-|---|\n| double | 3, 3.32 |\n| integer | 1L, 144L |\n| character | \"hello\", 'hello, world!'|\n| logical | TRUE, F |\n\n. . . \n\n*atomic* because they must contain only one type\n\n## Atomic vectors \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`double` \n\n```{r}\ntypeof(3.34)\n```\n\n`integer` \n\n```{r}\ntypeof(3L)\n```\n\n\n:::\n\n::: {.column width=\"50%\"}\n`character` \n\n```{r}\ntypeof('hello, world!')\n```\n\n`logical` \n\n```{r}\ntypeof(TRUE)\n```\n\n:::\n\n::::\n\n\n\n## Create a vector\n\n\nwith `c()` for `concatenate`\n\n```{r}\n\nc(2,4,6)\nc(\"hello\", \"world\", \"!\")\nc(T, F, T)\nc(\"hello\", c(2, 3))\n```\n\n\n## Create a vector\n\nwith sequences `seq()` or repetitions `rep()`\n\n```{r}\n# sequence of integers have a special shorthand\n6:10\n```\n\n. . . \n\n```{r}\n# sequence from, to, by \nseq(from=3, to=5, by=0.5)\n```\n\n. . . \n\n```{r}\n# rep(x, times = 1, each = 1)\nrep(c(1,0), times = 4)\n```\n\n. . . \n\n```{r}\n# rep(x, times = 1, each = 1)\nrep(c(1,0), each = 4)\n```\n\n## Check data type\n\nwith `typeof(x)` - returns the type of vector x\n\n```{r}\ntypeof(3)\ntypeof(3L)\ntypeof(\"three\")\ntypeof(TRUE)\n\n```\n\n## Check data type\n\nwith `is.*(x)` - returns `TRUE` if x has type `*`\n\n```{r}\nis.double(3)\nis.integer(3L)\nis.character(\"three\")\nis.logical(TRUE)\n```\n\n## Coercion, implicit\n\nIf you try to include elements of different types, R will coerce them into the same type without warning (**implicit coercion**)\n\n```{r}\nx <- c(1, 2, \"three\", 4, 5 )\nx\ntypeof(x)\n```\n\n## Coercion, explicit\n\nYou can also use **explict coercion** to change a vector to another data type with `as.*()`\n\n```{r}\nx <- c(1, 0 , 1, 0)\nas.logical(x)\n```\n\n. . . \n\n::: aside\nhierarchy: character > double > integer > logical \n:::\n\n# More complex structures \n\n## More complex structures {.smaller}\n\nSome more complex data structures are **built from atomic vectors** by adding **attributes**:\n\n| Structure | Description | \n| -- | -------- |\n| `matrix` | vector with `dim` attribute representing 2 dimensions\n| `array` | vector with `dim` attribute representing n dimensions\n| `data.frame` | a named list of vectors (of equal length) with attributes for `names` (column names), `row.names`, and `class=\"data.frame\"` |\n\n## Create more complex structures \n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`matrix` \n\n```{r}\nmatrix(0, nrow=2, ncol=3)\n```\n\n\n\n\n`data.frame` \n\n```{r}\ndata.frame(x=c(1,2,3), y=c('a','b','c'))\n```\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n`array` \n\n```{r}\narray(0, dim=c(2,3,2))\n```\n\n\n:::\n\n::::\n\n# Operations\n\n## Basic math operators\n\n\n| Operator | Operation |\n| -- | -- |\n| `()` | Parentheses | \n| `^` | Exponent | \n| `*` | Multiply | \n| `/` | Divide | \n| `+` | Add |\n `-` | Subtract |\n\n\n## Basic math operations\n\nfollow the order of operations you expect (PEMDAS)\n\n\n```{r}\n# multiplication takes precedence\n2 + 3 * 10\n\n# we can use paratheses to be explicit\n(2 + 3) * 10 \n```\n\n\n\n\n## Comparison operators\n\n| Operator | Comparison | \n| -- | -- |\n| `x < y` | less than |\n| `x > y` | greater than | \n| `x <= y` | less than or equal to | \n| `x >= y` | greater than or equal to |\n| `x != y` | not equal to | \n| `x == y` | equal to | \n\n## Comparison operators\n\n\n```{r}\nx <- 2\ny <- 3\n```\n\n. . . \n\n<br> \n\n```{r}\nx < y\nx > y \nx != y\nx == y\n```\n\n## Logical operators \n\n| Operator | Operation | \n| -- | -- | \n| `x | y` | or |\n| `x & y` | and |\n| `!x` | not |\n| `any()` | true if any element meets condition | \n|`all()` | true if all elements meet condition | \n| `%in%` | true if any element is in following vector | \n\n## Logical operators \n\n```{r}\nx <- TRUE\ny <- FALSE\n```\n\n. . . \n\n<br> \n\n```{r}\nx | y\nx & y \n!x \nany(c(x,y))\nall(c(x,y))\n```\n\n## Operations are vectorized \n\nAlmost all operations (and many functions) are vectorized \n\n. . .\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`math` \n\n```{r}\nc(1, 2, 3) + c(4, 5, 6)\nc(1, 2, 3) / c(4, 5, 6)\nc(1, 2, 3) * 10 \nc(1, 2, 30) > 10\n```\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n`logical` \n\n```{r}\nx <- c(TRUE, FALSE, FALSE)\ny <- c(TRUE, TRUE, FALSE)\nz <- TRUE\n```\n\n```{r}\nx | y\nx & y \nx | z \nx & z \n```\n\n:::\n\n::::\n\n\n\n## Operator coercion \n\nOperators and functions will also coerce values when needed (and without warning)\n\n```{r}\n5.6 + 2L\n10 + FALSE \nlog(1)\nlog(TRUE)\n```\n\n\n\n\n# Subsetting \n\n## Subsetting\n\n> Subsetting is a natural complement to str(). While str() shows you all the pieces of any object (its structure), subsetting allows you to pull out the pieces that youâ€™re interested in. ~ Hadley Wickham, Advanced R\n\n`str()`\n\n```{r}\nx <- c(\"hello\", \"world\", \"!\")\nstr(x)\n\ny <- c(1, 2, 3, 4, 5)\nstr(y)\n```\n\n## Subsetting\n\nThere are three operators for subsetting objects: \n\n- `[` - *subsets* (one or more) elements\n- `[[` and `$` - *extracts* a single element \n\n---\n## Subset multiple elements with `[` {.smaller}\n\n| Code | Returns |\n| ---- | -------- |\n| `x[c(1,2)]` | positive integers select elements at specified indexes |\n| `x[-c(1,2)]` | negative integers select all but elements at specified indexes |\n|`x[c(\"x\", \"y\")]` | select elements by name, if elements are named |\n| `x[]` |  nothing returns the original object |\n| `x[0]` | zero returns a zero-length vector |\n| `x[c(TRUE, TRUE)]` | select elements where corresponding logical value is TRUE |\n\n## Subset multiple elements with `[` {.smaller}\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`atomic vector`\n\n```{r}\nx <- c(\"hello\", \"world\", \"1\")\n```\n\n```{r}\nx[c(1,2)]\nx[-c(1,2)]\nx[]\n\n```\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n`data.frame`\n\n```{r}\ny <- data.frame(\n        this = c(1, 2,3), \n        that = c(\"a\", \"b\", \"c\"),\n        theother = c(4, 5, 6)\n        )\n```\n\n```{r}\n\ny[c(1,2)]\ny[-c(1,2)]\ny[c(\"this\")]\n\n```\n\n\n:::\n\n:::: \n\n\n\n## 3 ways to extract a single element {.smaller}\n\n| Code | Returns |\n| ---- | -------- |\n| `[[2]]` | a single positive integer (index) |\n| `[['name']]` | a single string  |\n| `x$name` | the `$` operator is a useful shorthand for `[['name']]` |\n\n## 3 ways to extract a single element {.smaller}\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`atomic vector`\n\n```{r}\nx <- c(\"hello\", \"world\", \"1\")\n```\n\n```{r}\nx[[1]]\nx[[2]]\nx[[3]]\n\n```\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n`data.frame`\n\n```{r}\ny <- data.frame(\n        this = c(1, 2,3), \n        that = c(\"a\", \"b\", \"c\"),\n        theother = c(4, 5, 6)\n        )\n```\n\n```{r}\n\ny[[1]]\ny[[\"that\"]]\ny$that\n\n```\n\n\n:::\n\n:::: \n\n\n\n## R has many built-in functions\n\n```{r}\nx <- c(1, -2, 3)\n```\n\n. . . \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\nSome are vectorized\n\n```{r}\nlog(x)\nabs(x)\nround(x, 2)\n\n```\n\n\n:::\n\n::: {.column width=\"50%\"}\n\nSome are not\n\n```{r}\nmean(x)\nmax(x)\nmin(x)\n```\n\n\n:::\n\n:::: \n\n\n\n\n\n\n## Missing values {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`NA`\n\n- used to represent missing or unknown elements in vectors\n- Note that `NA` is contageous: expressions including `NA` usually return `NA`\n- Check for `NA` values with `is.na()`\n\n```{r}\nx <- c(1, NA, 3)\nis.na(x)\nlength(x)\nmean(x)\n```\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n`NULL` \n\n- used to represent an empty or absent vector of arbitrary type\n- `NULL` is its own special type and always has length zero and `NULL` attributes\n- Check for `NULL` values with `is.null()`\n\n```{r}\nx <- c()\nis.null(x)\nlength(x)\nmean(x)\n```\n\n\n:::\n\n::::\n\n\n\n\n\n## Programming {.smaller}\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`functions`\n\nare reusable pieces of code that take some input, perform some task or computation, and return an output\n\n\n```r\nfunction(inputs){\n    # do something\n    return(output)\n}\n```\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n`control flow` \n\nrefers to managing the order in which expressions are executed in a program\n\n- `if`...`else` - if something is true, do this; otherwise do that\n- `for` loops - repeat code a specific number of times \n- `while` loops - repeat code as long as certain conditions are true\n- `break` - exit a loop early\n- `next` - skip to next iteration in a loop \n\n:::\n\n::::\n\n# Subsetting quirks \n\nIf we have time \n\n## Notes on `[` with higher dim objects \n\n```{r}\nm <- matrix(1:6, nrow=2, ncol=3)\nm\n```\n\n```{r}\n# separate dimensions by comma \nm[1, 2]\n\n# omitted dim return all from that dim \nm[2, ]\nm[ , 2]\n\n```\n\n## Notes on `[[` and `$`: {.smaller}\n\nboth `[[` and `[` work for vectors; use `[[`\n\n```{r}\nx <- c(1, -2, 3)\nx[[1]]\nx[1]\n```\n\n`$` does partial matching without warning\n\n```{r}\ndf <- data.frame(\n        this = c(1, 2,3), \n        that = c(\"a\", \"b\", \"c\"),\n        theother = c(4, 5, 6)\n        )\n```\n\n```{r}\ndf[['theo']]\ndf$theo\n```\n\n# Questions?\n\nHave a great weekend!"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","incremental":true,"output-file":"r-basics.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.3.353","auto-stretch":true,"callout-appearance":"simple","title":"R basics","author":"Katie Schuler","subtitle":"Data Science for Studying Language and the Mind","date":"2023-08-31","theme":"dark","footer":"[https://kathrynschuler.com/datasci](/index.html)"}}},"projectFormats":["html"]}