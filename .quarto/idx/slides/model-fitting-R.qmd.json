{"title":"Model Fitting with R (demo)","markdown":{"yaml":{"title":"Model Fitting with R (demo)","subtitle":"Data Science for Studying Language and the Mind","author":"Katie Schuler","date":"10-17-2023","echo":true,"format":{"revealjs":{"theme":"dark","slide-number":true,"incremental":true,"footer":"[https://kathrynschuler.com/datasci](https://kathrynschuler.com/datasci/)"}}},"headingText":"setup data","containsRefs":false,"markdown":"\n\n```{r}\n#| echo: false\n#| message: false\nlibrary(tidyverse)\nlibrary(modelr)\nlibrary(infer)\nlibrary(knitr)\nlibrary(parsnip)\nlibrary(optimg)\nlibrary(kableExtra)\ntheme_set(theme_classic(base_size = 20))\n\ndata <- tibble(\n    experience = c(49, 69, 89, 99, 109),\n    rt = c(124, 95, 71, 45, 18)\n)\n\ndata2 <- tibble(\n    x = c(1, 2, 3, 4, 5),\n    y = c(2, 2.5, 3.3, 4.1, 6.4)\n\n\n)\n\n```\n\n## You are `here` {.smaller} \n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\n##### Data science with R \n::: {.nonincremental}\n- Hello, world!\n- R basics\n- Data importing\n- Data visualization\n- Data wrangling \n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### Stats & Model buidling\n::: {.nonincremental}\n- Sampling distribution\n- Hypothesis testing\n- Model specification\n- `Model fitting` \n- Model accuracy\n- Model reliability\n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### More advanced \n::: {.nonincremental}\n\n- Classification\n- Feature engineering (preprocessing) \n- Inference for regression\n- Mixed-effect models\n::: \n:::\n\n::::\n\n## Roadmap {.smaller}\n\n- Fit a model in R \n- Goodness of fit: quantifying our intuition \n- How do we estimate the free parameters? \n    1. Gradient descent - iterative optimization algorithm\n    2. Ordinary least squares - analytical solution for linear regression\n- If time: another full example\n\n## Fit a model  {.smaller}\n\n:::: {.columns}\n::: {.column width=\"60%\"}\n\n\n\n```{r}\n#| echo: false\nggplot(data, aes(x = experience, y = rt)) +\n    geom_point(size = 4, color = \"darkred\") +\n    geom_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) +\n    labs(title = \"Is reaction time predicted by experience?\") \n\n```\n\n\n| | model specification | \n| -- | -- |\n| R syntax | `rt ~ 1 + experience` |\n| R syntax | `rt ~ experience` |\n| Equation | $y=w_0+w_1x_1$ |\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n```{mermaid}\n%%| echo: false\nflowchart TD\n    spec(Model specification) --> fit(Estimate free parameters) \n    fit(Estimate free parameters) --> fitted(Fitted model) \n```\n\n$y = 211.271 + -1.695x$\n:::\n::::\n\n## Fit a model in R {.smaller}\n\n:::: {.columns}\n::: {.column width=\"60%\"}\n\n\n\n```{r}\n#| echo: false\nggplot(data, aes(x = experience, y = rt)) +\n    geom_point(size = 4, color = \"darkred\") +\n    geom_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) +\n    labs(title = \"Is reaction time predicted by experience?\") \n\n```\n\n\n\n| | model specification| \n| -- | -- |\n| R syntax | `rt ~ 1 + experience` |\n| R syntax | `rt ~ experience` |\n| Equation | $y=w_0+w_1x_1$ |\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n::: {.fragment}\n\n```{r}\nlm(rt ~ experience, data = data)\n```\n\n:::\n\n::: {.fragment}\n\n```{r}\ndata %>% \n    specify(rt ~ experience) %>%\n    fit()\n```\n\n::: \n\n::: {.fragment}\n\n```{r}\nlinear_reg() %>%\n    set_engine(\"lm\") %>%\n    fit(rt ~ experience, data = data)\n```\n\n\n:::\n:::\n::::\n\n\n\n## Goodness of fit {.smaller}\n\nQuantifying our intution with sum of squared error\n\n```{r}\n#| echo: false\n#| layout-ncol: 2\n\nmodel <- lm(rt ~ experience, data = data)\n\ndata %>%\n    add_predictions(model) %>% # modelr\n    ggplot(aes(x = experience, y = rt)) +\n    geom_point(size = 4, color = \"darkred\") +\n    geom_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) +\n    geom_segment(aes(xend = experience, yend = pred)) \n    #coord_cartesian(ylim = c(0, 7))  +\n\n  data %>%\n    mutate(prediction = 211.271 + -1.695 * experience) %>%\n    mutate(error = prediction - rt) %>%\n    mutate(squared_error = error^2) %>%\n    kable() %>%\n    kable_styling(font_size = 16)\n\n\n```\n\n. . . \n\n$SSE=\\sum_{i=i}^{n} (d_{i} - m_{i})^2 = 205.139$ \n\n\n## Sum of squared error {.smaller}\n\nGiven some data: \n\n```{r}\n#| echo: false\n  data %>%\n    mutate(prediction = 211.271 + -1.695 * experience) %>%\n    mutate(error = prediction - rt) %>%\n    mutate(squared_error = error^2) %>%\n    kable()  %>%\n    kable_styling(font_size = 18)\n\n```\n\nCompute the sum of squared error: \n\n$SSE=\\sum_{i=i}^{n} (d_{i} - m_{i})^2 = 205.139$ \n\n. . . \n\n```{r}\n  data %>%\n    mutate(prediction = 211.271 + -1.695 * experience) %>%\n    mutate(error = prediction - rt) %>%\n    mutate(squared_error = error^2) %>%\n    with(sum(squared_error))\n\n```\n\n## Gradient descent \n\nA search problem: we have a parameter space, a cost function, and our job is to search through the space to find the point that minimizes the cost function.\n\n\n![](../include/figures/gradient-descent.png)\n\n\n## Gradient descent {.smaller}\n\nDefine our cost function:\n\n```{r}\nSSE <- function(data, par) {\n  data %>%\n    mutate(prediction = par[1] + par[2]* experience) %>%\n    mutate(error = prediction - rt) %>%\n    mutate(squared_error = error^2) %>%\n    with(sum(squared_error))\n}\n\nSSE(data = data, par = c(0, 0))\n\n```\n\n. . . \n\nImpliment gradient descent algorithm with `optimg`\n\n```{r}\noptimg(\n    data = data,  # our data\n    par = c(0,0), # our parameters\n    fn = SSE,     # our cost function\n    method = \"STGD\") # our iterative optimization algorithm \n\n```\n\n## Ordinary least squares solution {.smaller}\n\n$y = w_0 + w_1x_1$\n\n. . . \n\nWe have a system of equations: \n\n- $124 = w_01 + w_149$\n- $95 = w_01 + w_169$ \n- ...\n- $18 = w_01 + w_1109$\n\n. . . \n\nWe can express them as a matrix: \n$Y = Xw + \\epsilon$ \n\n. . . \n\nAnd solve with linear algebra:\n$w = (X^TX)^{-1}X^TY$\n\n<!-- \\[\n\\begin{bmatrix}\n124\\\\\n95\\\\\n71\\\\\n45\\\\\n18\\\\\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n1 & 49\\\\\n1 & 69\\\\\n1 & 79\\\\\n1 & 89\\\\\n1 & 99\\\\\n1 & 109\\\\\n\\end{bmatrix}\n\\times\n\\begin{bmatrix}\nw_0\\\\\nw_1\\\\\n\\end{bmatrix} \n\\] -->\n\n## Ordinary least squares solution in R {.smaller}\n\n```{r}\n ols_matrix_way <- function(X, Y){\n  solve(t(X) %*% X) %*% t(X) %*% Y\n }\n```\n\n. . . \n\nWe need to construct X and Y (must be matrices): \n\n```{r}\n#| layout-ncol: 2\n(response_matrix <- data %>% select(rt) %>% as.matrix())\n(explanatory_matrix <- data %>% mutate(int = 1) %>% select(int, experience) %>% as.matrix())\n```\n\n. . . \n\nThen we can use our function to generate the OLS solution: \n```{r}\nols_matrix_way(explanatory_matrix, response_matrix)\n```\n\n```{r}\nlm(rt ~ experience, data = data)\n```\n<!-- \n\n## Linear model functional form\n\n| field | linear model eq |\n| --- | --------- |\n| `h.s. algebra` | $y=ax+b$ |\n| `machine learning` | $y = w_0 + w_1x_1 + w_2x_2 + ... + w_nx_n$ |\n| `statistics` | $y = β_0 + β_1x_1 + β_2x_2 + ... + β_nx_n + ε$ |\n| `matrix` | $y = Xβ + ε$ |\n\n\n## Fitting a linear model {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\n\n\n\n\n:::\n\n::: {.column width=\"67%\"}\n\n```{r}\n#| echo: false\n\ndata <- tibble(\n    x = c(1, 2, 3, 4, 5),\n    y = c(1.2, 2.5, 2.3, 3.1, 4.4)\n)\n\ndata2 <- tibble(\n    x = c(1, 2, 3, 4, 5),\n    y = c(2, 2.5, 3.3, 4.1, 6.4)\n\n\n)\n\n\n```\n\n```{r}\nggplot(data, aes(x = x, y = y)) +\n    geom_point(size = 4, color = \"darkred\") +\n    geom_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) \n\n```\n\n:::\n\n\n\n::::\n\n## Fitting by intuition {.smaller}\n\nHow would you draw a \"best fit\" line?  \n\n\n```{r}\n#| echo: false\n\nggplot(data, aes(x = x, y = y)) +\ngeom_point(size = 4, color = \"darkred\")\n\n```\n\n## Fitting by intuition {.smaller}\n\nWhich line fits best?  How can you tell? \n\n```{r}\n#| echo: false\n#| layout-ncol: 2\n#| layout-nrow: 3\n\n\n\nggplot(data, aes(x = x, y = y)) +\ngeom_point(size = 4, color = \"darkred\") +\ngeom_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) +\ncoord_cartesian(ylim = c(0, 7)) +\nlabs(tag = \"A\")\n\n\nggplot(data, aes(x = x, y = y)) +\ngeom_point(size = 4, color = \"darkred\") +\ngeom_smooth(\n    data = data2, \n    mapping = aes(x = x, y = y), \n    method = \"lm\", formula = \"y ~ x\", se = FALSE) +\n    coord_cartesian(ylim = c(0, 7)) +\nlabs(tag = \"B\")\n\n```\n\n\n## Quantifying \"goodness\" of fit  {.smaller}\n\nWe can measure how close the model is to the data\n\n```{r}\n#| echo: false\nmodelA <- lm(y ~ x, data = data)\nmodelB <- lm(y ~ x, data = data2)\n\nmseA <- data %>% add_predictions(modelA) %>%\n    mutate(err = y - pred, sq_err = err^2)\n\nmseB <- data %>% add_predictions(modelB) %>%\n    mutate(err = y - pred, sq_err = err^2)\n\n```\n\n\n\n\n```{r}\n#| echo: false\n#| layout-ncol: 2\n\nggplot(mseA, aes(x = x, y = y)) +\ngeom_point(size = 4, color = \"darkred\") +\ngeom_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) +\ngeom_segment(aes(xend = x, yend = pred)) +\ncoord_cartesian(ylim = c(0, 7))  +\nlabs(tag = \"A\", title = \"Fits well\")\n\n\n\nggplot(mseB, aes(x = x, y = y)) +\ngeom_point(size = 4, color = \"darkred\") +\ngeom_smooth(\n    data = data2, \n    mapping = aes(x = x, y = y), \n    method = \"lm\", formula = \"y ~ x\", se = FALSE) +\n    geom_segment(aes(xend = x, yend = pred)) +\n    coord_cartesian(ylim = c(0, 7)) +\nlabs(tag = \"B\", title = \"Fits less well\")\n\n\n\n```\n\n. . . \n\n`residuals`\n\n## {.smaller} \n\n```{r}\n#| echo: false\n#| layout-ncol: 2\n#| layout-nrow: 2\n#| \nggplot(data, aes(x = x, y = y)) +\ngeom_point(size = 4, color = \"darkred\") +\ngeom_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) +\ncoord_cartesian(ylim = c(0, 7)) +\nlabs(tag = \"A\", title = \"Low SSE, y = 0.7x + 0.6\", caption = \"SSE = 0.6\")\n\n\nggplot(data, aes(x = x, y = y)) +\ngeom_point(size = 4, color = \"darkred\") +\ngeom_smooth(\n    data = data2, \n    mapping = aes(x = x, y = y), \n    method = \"lm\", formula = \"y ~ x\", se = FALSE) +\n    coord_cartesian(ylim = c(0, 7)) +\nlabs(tag = \"B\", title = \"High SSE\", caption = \"SSE = 6.364\")\n\nkable(mseA)\nkable(mseB)\n\n\n\n\n```\n\n## But there are infinite possibilities\n\nWe can't test all `Inf` of the possible free parameters\n\n$y=b_0+b_1x_1$\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n#### Free parameters to test\n\n![](../include/figures/error-surf-1.png)\n\n:::\n\n::: {.column width=\"50%\"}\n\n#### Level = SSE\n\n![](../include/figures/error-surf-2.png)\n\n:::\n\n::::\n\n\n## Error surface \n\n![](../include/figures/error-surface.png)\n\n## Gradient descent, intuition\n\n![](../include/figures/grad-desc-intuition.jpeg)\n\n## Gradient descent \n\n![](../include/figures/gradient-descent.png)\n\n## Gradient descent linear model \n\n![](../include/figures/error-surface-linear.png)\n\nLinear models are convex functions: one minimum\n\n## Ordinary least squares\n\nLinear models have a solution: we can solve for the values with linear algebra. \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n#### $y = ax + b$\n\n$1.2 = a1 + b$\n\n$2.5 = a2 + b$\n\n::: \n\n::: {.column width=\"50%\"}\n\n```{r}\nlm(y ~ 1 + x, data)\n```\n\n```{r}\ndata %>%\n    specify(y ~ 1 + x) %>%\n    fit()\n```\n\n:::\n\n::::\n\n`ordinary least squares`\n\n\n\n\n\n\n\n\n\n\n\n -->\n","srcMarkdownNoYaml":"\n\n```{r}\n#| echo: false\n#| message: false\nlibrary(tidyverse)\nlibrary(modelr)\nlibrary(infer)\nlibrary(knitr)\nlibrary(parsnip)\nlibrary(optimg)\nlibrary(kableExtra)\ntheme_set(theme_classic(base_size = 20))\n\n# setup data \ndata <- tibble(\n    experience = c(49, 69, 89, 99, 109),\n    rt = c(124, 95, 71, 45, 18)\n)\n\ndata2 <- tibble(\n    x = c(1, 2, 3, 4, 5),\n    y = c(2, 2.5, 3.3, 4.1, 6.4)\n\n\n)\n\n```\n\n## You are `here` {.smaller} \n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\n##### Data science with R \n::: {.nonincremental}\n- Hello, world!\n- R basics\n- Data importing\n- Data visualization\n- Data wrangling \n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### Stats & Model buidling\n::: {.nonincremental}\n- Sampling distribution\n- Hypothesis testing\n- Model specification\n- `Model fitting` \n- Model accuracy\n- Model reliability\n:::\n:::\n\n::: {.column width=\"33%\"}\n\n##### More advanced \n::: {.nonincremental}\n\n- Classification\n- Feature engineering (preprocessing) \n- Inference for regression\n- Mixed-effect models\n::: \n:::\n\n::::\n\n## Roadmap {.smaller}\n\n- Fit a model in R \n- Goodness of fit: quantifying our intuition \n- How do we estimate the free parameters? \n    1. Gradient descent - iterative optimization algorithm\n    2. Ordinary least squares - analytical solution for linear regression\n- If time: another full example\n\n## Fit a model  {.smaller}\n\n:::: {.columns}\n::: {.column width=\"60%\"}\n\n\n\n```{r}\n#| echo: false\nggplot(data, aes(x = experience, y = rt)) +\n    geom_point(size = 4, color = \"darkred\") +\n    geom_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) +\n    labs(title = \"Is reaction time predicted by experience?\") \n\n```\n\n\n| | model specification | \n| -- | -- |\n| R syntax | `rt ~ 1 + experience` |\n| R syntax | `rt ~ experience` |\n| Equation | $y=w_0+w_1x_1$ |\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n```{mermaid}\n%%| echo: false\nflowchart TD\n    spec(Model specification) --> fit(Estimate free parameters) \n    fit(Estimate free parameters) --> fitted(Fitted model) \n```\n\n$y = 211.271 + -1.695x$\n:::\n::::\n\n## Fit a model in R {.smaller}\n\n:::: {.columns}\n::: {.column width=\"60%\"}\n\n\n\n```{r}\n#| echo: false\nggplot(data, aes(x = experience, y = rt)) +\n    geom_point(size = 4, color = \"darkred\") +\n    geom_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) +\n    labs(title = \"Is reaction time predicted by experience?\") \n\n```\n\n\n\n| | model specification| \n| -- | -- |\n| R syntax | `rt ~ 1 + experience` |\n| R syntax | `rt ~ experience` |\n| Equation | $y=w_0+w_1x_1$ |\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n::: {.fragment}\n\n```{r}\nlm(rt ~ experience, data = data)\n```\n\n:::\n\n::: {.fragment}\n\n```{r}\ndata %>% \n    specify(rt ~ experience) %>%\n    fit()\n```\n\n::: \n\n::: {.fragment}\n\n```{r}\nlinear_reg() %>%\n    set_engine(\"lm\") %>%\n    fit(rt ~ experience, data = data)\n```\n\n\n:::\n:::\n::::\n\n\n\n## Goodness of fit {.smaller}\n\nQuantifying our intution with sum of squared error\n\n```{r}\n#| echo: false\n#| layout-ncol: 2\n\nmodel <- lm(rt ~ experience, data = data)\n\ndata %>%\n    add_predictions(model) %>% # modelr\n    ggplot(aes(x = experience, y = rt)) +\n    geom_point(size = 4, color = \"darkred\") +\n    geom_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) +\n    geom_segment(aes(xend = experience, yend = pred)) \n    #coord_cartesian(ylim = c(0, 7))  +\n\n  data %>%\n    mutate(prediction = 211.271 + -1.695 * experience) %>%\n    mutate(error = prediction - rt) %>%\n    mutate(squared_error = error^2) %>%\n    kable() %>%\n    kable_styling(font_size = 16)\n\n\n```\n\n. . . \n\n$SSE=\\sum_{i=i}^{n} (d_{i} - m_{i})^2 = 205.139$ \n\n\n## Sum of squared error {.smaller}\n\nGiven some data: \n\n```{r}\n#| echo: false\n  data %>%\n    mutate(prediction = 211.271 + -1.695 * experience) %>%\n    mutate(error = prediction - rt) %>%\n    mutate(squared_error = error^2) %>%\n    kable()  %>%\n    kable_styling(font_size = 18)\n\n```\n\nCompute the sum of squared error: \n\n$SSE=\\sum_{i=i}^{n} (d_{i} - m_{i})^2 = 205.139$ \n\n. . . \n\n```{r}\n  data %>%\n    mutate(prediction = 211.271 + -1.695 * experience) %>%\n    mutate(error = prediction - rt) %>%\n    mutate(squared_error = error^2) %>%\n    with(sum(squared_error))\n\n```\n\n## Gradient descent \n\nA search problem: we have a parameter space, a cost function, and our job is to search through the space to find the point that minimizes the cost function.\n\n\n![](../include/figures/gradient-descent.png)\n\n\n## Gradient descent {.smaller}\n\nDefine our cost function:\n\n```{r}\nSSE <- function(data, par) {\n  data %>%\n    mutate(prediction = par[1] + par[2]* experience) %>%\n    mutate(error = prediction - rt) %>%\n    mutate(squared_error = error^2) %>%\n    with(sum(squared_error))\n}\n\nSSE(data = data, par = c(0, 0))\n\n```\n\n. . . \n\nImpliment gradient descent algorithm with `optimg`\n\n```{r}\noptimg(\n    data = data,  # our data\n    par = c(0,0), # our parameters\n    fn = SSE,     # our cost function\n    method = \"STGD\") # our iterative optimization algorithm \n\n```\n\n## Ordinary least squares solution {.smaller}\n\n$y = w_0 + w_1x_1$\n\n. . . \n\nWe have a system of equations: \n\n- $124 = w_01 + w_149$\n- $95 = w_01 + w_169$ \n- ...\n- $18 = w_01 + w_1109$\n\n. . . \n\nWe can express them as a matrix: \n$Y = Xw + \\epsilon$ \n\n. . . \n\nAnd solve with linear algebra:\n$w = (X^TX)^{-1}X^TY$\n\n<!-- \\[\n\\begin{bmatrix}\n124\\\\\n95\\\\\n71\\\\\n45\\\\\n18\\\\\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n1 & 49\\\\\n1 & 69\\\\\n1 & 79\\\\\n1 & 89\\\\\n1 & 99\\\\\n1 & 109\\\\\n\\end{bmatrix}\n\\times\n\\begin{bmatrix}\nw_0\\\\\nw_1\\\\\n\\end{bmatrix} \n\\] -->\n\n## Ordinary least squares solution in R {.smaller}\n\n```{r}\n ols_matrix_way <- function(X, Y){\n  solve(t(X) %*% X) %*% t(X) %*% Y\n }\n```\n\n. . . \n\nWe need to construct X and Y (must be matrices): \n\n```{r}\n#| layout-ncol: 2\n(response_matrix <- data %>% select(rt) %>% as.matrix())\n(explanatory_matrix <- data %>% mutate(int = 1) %>% select(int, experience) %>% as.matrix())\n```\n\n. . . \n\nThen we can use our function to generate the OLS solution: \n```{r}\nols_matrix_way(explanatory_matrix, response_matrix)\n```\n\n```{r}\nlm(rt ~ experience, data = data)\n```\n<!-- \n\n## Linear model functional form\n\n| field | linear model eq |\n| --- | --------- |\n| `h.s. algebra` | $y=ax+b$ |\n| `machine learning` | $y = w_0 + w_1x_1 + w_2x_2 + ... + w_nx_n$ |\n| `statistics` | $y = β_0 + β_1x_1 + β_2x_2 + ... + β_nx_n + ε$ |\n| `matrix` | $y = Xβ + ε$ |\n\n\n## Fitting a linear model {.smaller}\n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\n\n\n\n\n:::\n\n::: {.column width=\"67%\"}\n\n```{r}\n#| echo: false\n\ndata <- tibble(\n    x = c(1, 2, 3, 4, 5),\n    y = c(1.2, 2.5, 2.3, 3.1, 4.4)\n)\n\ndata2 <- tibble(\n    x = c(1, 2, 3, 4, 5),\n    y = c(2, 2.5, 3.3, 4.1, 6.4)\n\n\n)\n\n\n```\n\n```{r}\nggplot(data, aes(x = x, y = y)) +\n    geom_point(size = 4, color = \"darkred\") +\n    geom_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) \n\n```\n\n:::\n\n\n\n::::\n\n## Fitting by intuition {.smaller}\n\nHow would you draw a \"best fit\" line?  \n\n\n```{r}\n#| echo: false\n\nggplot(data, aes(x = x, y = y)) +\ngeom_point(size = 4, color = \"darkred\")\n\n```\n\n## Fitting by intuition {.smaller}\n\nWhich line fits best?  How can you tell? \n\n```{r}\n#| echo: false\n#| layout-ncol: 2\n#| layout-nrow: 3\n\n\n\nggplot(data, aes(x = x, y = y)) +\ngeom_point(size = 4, color = \"darkred\") +\ngeom_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) +\ncoord_cartesian(ylim = c(0, 7)) +\nlabs(tag = \"A\")\n\n\nggplot(data, aes(x = x, y = y)) +\ngeom_point(size = 4, color = \"darkred\") +\ngeom_smooth(\n    data = data2, \n    mapping = aes(x = x, y = y), \n    method = \"lm\", formula = \"y ~ x\", se = FALSE) +\n    coord_cartesian(ylim = c(0, 7)) +\nlabs(tag = \"B\")\n\n```\n\n\n## Quantifying \"goodness\" of fit  {.smaller}\n\nWe can measure how close the model is to the data\n\n```{r}\n#| echo: false\nmodelA <- lm(y ~ x, data = data)\nmodelB <- lm(y ~ x, data = data2)\n\nmseA <- data %>% add_predictions(modelA) %>%\n    mutate(err = y - pred, sq_err = err^2)\n\nmseB <- data %>% add_predictions(modelB) %>%\n    mutate(err = y - pred, sq_err = err^2)\n\n```\n\n\n\n\n```{r}\n#| echo: false\n#| layout-ncol: 2\n\nggplot(mseA, aes(x = x, y = y)) +\ngeom_point(size = 4, color = \"darkred\") +\ngeom_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) +\ngeom_segment(aes(xend = x, yend = pred)) +\ncoord_cartesian(ylim = c(0, 7))  +\nlabs(tag = \"A\", title = \"Fits well\")\n\n\n\nggplot(mseB, aes(x = x, y = y)) +\ngeom_point(size = 4, color = \"darkred\") +\ngeom_smooth(\n    data = data2, \n    mapping = aes(x = x, y = y), \n    method = \"lm\", formula = \"y ~ x\", se = FALSE) +\n    geom_segment(aes(xend = x, yend = pred)) +\n    coord_cartesian(ylim = c(0, 7)) +\nlabs(tag = \"B\", title = \"Fits less well\")\n\n\n\n```\n\n. . . \n\n`residuals`\n\n## {.smaller} \n\n```{r}\n#| echo: false\n#| layout-ncol: 2\n#| layout-nrow: 2\n#| \nggplot(data, aes(x = x, y = y)) +\ngeom_point(size = 4, color = \"darkred\") +\ngeom_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) +\ncoord_cartesian(ylim = c(0, 7)) +\nlabs(tag = \"A\", title = \"Low SSE, y = 0.7x + 0.6\", caption = \"SSE = 0.6\")\n\n\nggplot(data, aes(x = x, y = y)) +\ngeom_point(size = 4, color = \"darkred\") +\ngeom_smooth(\n    data = data2, \n    mapping = aes(x = x, y = y), \n    method = \"lm\", formula = \"y ~ x\", se = FALSE) +\n    coord_cartesian(ylim = c(0, 7)) +\nlabs(tag = \"B\", title = \"High SSE\", caption = \"SSE = 6.364\")\n\nkable(mseA)\nkable(mseB)\n\n\n\n\n```\n\n## But there are infinite possibilities\n\nWe can't test all `Inf` of the possible free parameters\n\n$y=b_0+b_1x_1$\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n#### Free parameters to test\n\n![](../include/figures/error-surf-1.png)\n\n:::\n\n::: {.column width=\"50%\"}\n\n#### Level = SSE\n\n![](../include/figures/error-surf-2.png)\n\n:::\n\n::::\n\n\n## Error surface \n\n![](../include/figures/error-surface.png)\n\n## Gradient descent, intuition\n\n![](../include/figures/grad-desc-intuition.jpeg)\n\n## Gradient descent \n\n![](../include/figures/gradient-descent.png)\n\n## Gradient descent linear model \n\n![](../include/figures/error-surface-linear.png)\n\nLinear models are convex functions: one minimum\n\n## Ordinary least squares\n\nLinear models have a solution: we can solve for the values with linear algebra. \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n#### $y = ax + b$\n\n$1.2 = a1 + b$\n\n$2.5 = a2 + b$\n\n::: \n\n::: {.column width=\"50%\"}\n\n```{r}\nlm(y ~ 1 + x, data)\n```\n\n```{r}\ndata %>%\n    specify(y ~ 1 + x) %>%\n    fit()\n```\n\n:::\n\n::::\n\n`ordinary least squares`\n\n\n\n\n\n\n\n\n\n\n\n -->\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","incremental":true,"output-file":"model-fitting-R.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.3.353","auto-stretch":true,"callout-appearance":"simple","title":"Model Fitting with R (demo)","subtitle":"Data Science for Studying Language and the Mind","author":"Katie Schuler","date":"10-17-2023","theme":"dark","slideNumber":true,"footer":"[https://kathrynschuler.com/datasci](https://kathrynschuler.com/datasci/)"}}},"projectFormats":["html"]}