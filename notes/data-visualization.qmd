---
title: "Data visualization"
date: 09/12/2023
author: Katie Schuler

---

::: {.callout-warning title="Under Construction"}
:::

```{r}
#| message: false
#| code-fold: true
#| code-summary: "Setup code"

library(tidyverse)
library(languageR)

```

<!-- ## Why visualize data?

- why visualize. grammar of graphics. installing?  -->

## Visualization with ggplot2

There are many ways to visualize data with R. We will use `ggplot2`, one of the core pacakges in the `tidyverse`.

- `ggplot2` makes use of a system for describing and creating graphics known as the layered **grammar of graphics** 
- learning this one simple system allows you to generate many different types of plots

To create a plot with `ggplot2`, you call the function `ggplot()`, which creates a **plot object** that you then add **layers** to. There are 3 basic requirements for every ggplot:

1. **data** - what dataset are you ploting? Including only data generates an empty canvas 
2. **aesthetics** - define how variables in your dataset are mapped to visual properties in the plot
3. **geoms** - determine the geometrical object that a plot uses to represent the data

We can think of the following as a basic template for any ggplot:

```r
ggplot(
    data = <DATA>,
    mapping = aes(<MAPPINGS>)
) + 
`<GEOM_FUNCTION>
```

One common **warning** you will encounter is about missing values. `ggplot2` will always let you know that some of your data could not be plotted in the way you specified. Usually this is good to know, but nothing to worry about: 

> Removed n rows containing missing values 


We won't cover everything you can do with ggplot (that would be a lot!) In lecture we'll demo the most common features, but you should feel comfortable using the ggplot2 docs to figure out how to do other things.


## Aesthetics 

There are two ways we can determine the aesthetics of a plot: 

- **mapping** allows us to determine aesthetics based on a variable, which are passed as arguments in `aes(color=var)`. 
- **setting** allows us to set aesthetics to a constant value, which are passed as their own argument `color=var`

When we **map** aesthetics, ggplot2 selects reasonable scales -- known as **scaling** -- and creates legends to describe the mapping for us (except for x and y aesthetics; for those ggplot creates the axis). But when we **set** aesthetics, we must select the value for the aesthetic manually. 

- **color** and **fill** - set name of a color as a string, e.g. `color="blue"`
- alpha - set value between 0 and 1, where 0 is most transparent, e.g. `alpha=0.5`
- size - set size of point in mm, e.g. `size=1`
- shape - set shape of point as a number, e.g. `shape=1`. There are 25 built in shapes (see below)
- linetype - 

There are **3 common warnings** people encounter when **mapping categorical variables** 

> 1. The shape palette can deal with a maximum of 6 discrete values
> 2. Removed n rows containing missing values
> 3. Using alpha for a discrete value is not advised.

- The first two happen when mapping **shape**, because by default ggplot2 will use no more than 6 shapes at a time (and any additional levels are discarded)
- The last one happens when mapping **size** or **alpha**, because it is strange to map  an unordered categorical variable to an ordered aesthetic. Size and alpha imply there is some ranking but there is none!



## Geoms 

- **`geom_*()`** - to change the geom, simply change the geom function
    - [Available geoms](https://ggplot2.tidyverse.org/reference/#geoms)

- **the mapping argument** - every geom takes a mapping argument that allows you to define the aesetic mapping locally

- **data argument** - every geom also takes a data argument that allows you to define the data locally 

When using the mapping and data arguments in geoms, remember: 

- they are *local*, meaning they only apply to *that specific layer* 
- they will extend or override any *global* mappings or data you specified in `ggplot()`
- they (usefully!) allow you to specify different aesthetics or data in different layers



## Other layers 

### Labels 

The labels layer allows you to modify axis, legend, and plot labels with the `labs()` function. `labs()` takes several argument. Some are a straightforward name, like: 

- **title** - plot title
- **subtitle** - plot subtitle 
- **caption** - caption at bottom right of plot

Others are mapped to aesthetics, like: 

- **x** - the x axis label
- **y** - the y axis label
- **color** - the legend for the color aesthetic
- **size** - the legend for the size aesthetic

### Themes 

ggplot comes with many [complete themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) which control how everything is displayed (except data!). A few favorites include:

- `theme_gray()` - the default
- `theme_bw()` - classic dark-on-light theme
- `theme_minimal()` - minimal theme with no backgroun annotations 
- `theme_classic()` - a classic looking theme with no gridelines

Themes take a few arguments, two of which we may use in the class: 

- **base_size** - base font size, given in pts 
- **base_family** - base font family to use 


### Scales 

[Scales](https://ggplot2.tidyverse.org/reference/#scales) control the details of how data values are translated to visual properties. Adding a scale layer overrides the default scales that ggplot uses automatically. For example: 

- `scale_color_brewer()` - changes the color scale
- `scale_fill_manual()` - also changes the color, set to manual values with **values** argument 


### Facets 

- `facet_wrap(~var)` - splits a plot into subplots based on a categorical variable; each subplot displays a subset of the data 

- `facet_grid(rows~cols)` - splits a plot into subplots with the combination of two variables

- `scales` - by default facets share the same scale and range for x and y aesthetics. Set the `scales` argument to "free" to allow for different axis scales. 

<!-- ### Statistical transformations


-  Stat 
- Default stats
- Overriding default stats  -->

### Position adjustments 

- `geom_bar()` - the default position is `"stacked"`, but there are 3 other options: 
    - `position="identity"` 
    - `position="dodge"`
    - `position="fill"`

- `geom_point()` - 
    - `poisiton="jitter"` - adds a small amount of random noise to each point, which speads them out! Technically makes your plot less accurate, but can also reveal important information. 
    - `geom_jitter()` - is a shorthand for `geom_point(position="jitter")`

## Shortcuts 

When calling ggplot2 (or any function!) we can specify argument names explicitly or leave them off (implicit). Leaving off the names makes code more conscise, so you'll typically see it that way.

- **explicit** naming of arguments allow us to write them in any order (because we indicate them to ggplot by their name)

    ```r
    ggplot(
        data = my_data,
        mapping = aes(x = weight, y = height)
    )
    ```

- **implict** argument names means we have to specify them in a perscribed order (data first!) so ggplot can identify them without their name

    ```r
    ggplot(
        my_data,
        aes(x = weight, y = height)
    )
    ```

Another shortcut you'll encounter is **the pipe operator**, `%>%`. The pipe takes the thing on its left and passes it along to the function on its right (as the function's first argument) 

- `x %>% y` is equivalent to `f(x, y)`
- since the first argument to ggplot() is data, you'll typically see the pipe used like this:

    ```r
    my_data %>% 
    ggplot(
        aes(x = weight, y = height)
    )
    ```

<!-- ## Saving plots -->


<!-- ## Further reading  -->

